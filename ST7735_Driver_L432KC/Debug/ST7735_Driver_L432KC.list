
ST7735_Driver_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000419c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004330  08004330  00005330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080043c0  080043c0  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c0  080043c0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043c4  080043c4  000053c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080043c8  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  08004438  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004438  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a07d  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189c  00000000  00000000  0001011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  000119c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005da  00000000  00000000  00012198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c5b  00000000  00000000  00012772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096d2  00000000  00000000  000343cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bee3e  00000000  00000000  0003da9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  000fc920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000fee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004314 	.word	0x08004314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004314 	.word	0x08004314

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <_Z11WriteParamsv>:
    type c = a;
    a = b;
    b = c;
}

void WriteParams(){}
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <_Z12WriteCommandhPhh>:
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    WriteParams(Args...);
}

void WriteCommand(unsigned char Command, unsigned char* Params = NULL, unsigned char NumParams = 0){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <_Z12WriteCommandhPhh+0x64>)
 8000bbe:	f001 f9f3 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_Z12WriteCommandhPhh+0x68>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	1df9      	adds	r1, r7, #7
 8000bc8:	2364      	movs	r3, #100	@ 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f002 f90b 	bl	8002de6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <_Z12WriteCommandhPhh+0x64>)
 8000bd6:	f001 f9e7 	bl	8001fa8 <HAL_GPIO_WritePin>
    for(int i = 0; i < NumParams; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	e00b      	b.n	8000bf8 <_Z12WriteCommandhPhh+0x50>
    	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Params[i], 1, 100);
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <_Z12WriteCommandhPhh+0x68>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	18d1      	adds	r1, r2, r3
 8000bea:	2364      	movs	r3, #100	@ 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	f002 f8fa 	bl	8002de6 <HAL_SPI_Transmit>
    for(int i = 0; i < NumParams; i++){
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbef      	blt.n	8000be0 <_Z12WriteCommandhPhh+0x38>
    }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <_Z7HWResetv>:

void HWReset(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2180      	movs	r1, #128	@ 0x80
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <_Z7HWResetv+0x24>)
 8000c1e:	f001 f9c3 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f000 ff4c 	bl	8001ac0 <HAL_Delay>
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <_Z7HWResetv+0x24>)
 8000c2e:	f001 f9bb 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <_Z11DisplayInitP19__SPI_HandleTypeDef>:

void DisplayInit(SPI_HandleTypeDef *hspi){
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	DisplayHandle = hspi;
 8000c44:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xd8>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]

	HWReset();
 8000c4a:	f7ff ffe3 	bl	8000c14 <_Z7HWResetv>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	@ 0x40
 8000c52:	4831      	ldr	r0, [pc, #196]	@ (8000d18 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xdc>)
 8000c54:	f001 f9a8 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xdc>)
 8000c5e:	f001 f9a3 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 ff2c 	bl	8001ac0 <HAL_Delay>
	unsigned char InitSequence[] = {
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <_Z11DisplayInitP19__SPI_HandleTypeDef+0xe0>)
 8000c6a:	f107 040c 	add.w	r4, r7, #12
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	c403      	stmia	r4!, {r0, r1}
 8000c7a:	8022      	strh	r2, [r4, #0]
	2, COLMOD, 0x05,
	2, MADCTL, 0b01100000,
	5, CASET, 0x00,0x00, 0x00, 0x9F,
	5, RASET, 0x00,0x00, 0x00, 0x7F,
	};
	unsigned char Instruction = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while(Instruction < sizeof(InitSequence)/sizeof(char)){
 8000c82:	e024      	b.n	8000cce <_Z11DisplayInitP19__SPI_HandleTypeDef+0x92>
	WriteCommand(InitSequence[Instruction + 1], &InitSequence[Instruction + 2], InitSequence[Instruction]-1);
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c88:	3301      	adds	r3, #1
 8000c8a:	3330      	adds	r3, #48	@ 0x30
 8000c8c:	443b      	add	r3, r7
 8000c8e:	f813 0c24 	ldrb.w	r0, [r3, #-36]
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c96:	3302      	adds	r3, #2
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	18d1      	adds	r1, r2, r3
 8000c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca2:	3330      	adds	r3, #48	@ 0x30
 8000ca4:	443b      	add	r3, r7
 8000ca6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f7ff ff7a 	bl	8000ba8 <_Z12WriteCommandhPhh>
	Instruction += InitSequence[Instruction] + 1;
 8000cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb8:	3330      	adds	r3, #48	@ 0x30
 8000cba:	443b      	add	r3, r7
 8000cbc:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while(Instruction < sizeof(InitSequence)/sizeof(char)){
 8000cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cd2:	2b19      	cmp	r3, #25
 8000cd4:	d9d6      	bls.n	8000c84 <_Z11DisplayInitP19__SPI_HandleTypeDef+0x48>
	}
	WriteCommand(RAMWR);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	202c      	movs	r0, #44	@ 0x2c
 8000cdc:	f7ff ff64 	bl	8000ba8 <_Z12WriteCommandhPhh>
	for(int i = 0; i<D_WIDTH*D_HEIGHT; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce4:	e00c      	b.n	8000d00 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xc4>
		unsigned char data = 0b0000000000000000;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	72fb      	strb	r3, [r7, #11]
		HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&data, 2, 100);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xd8>)
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	f107 010b 	add.w	r1, r7, #11
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	f002 f876 	bl	8002de6 <HAL_SPI_Transmit>
	for(int i = 0; i<D_WIDTH*D_HEIGHT; i++){
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000d06:	dbee      	blt.n	8000ce6 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xaa>
	}

}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	08004330 	.word	0x08004330

08000d20 <_Z7SetAddriiii>:

void SetAddr(int RowStart, int ColStart, int RowEnd = 0x7F, int ColEnd = 0x9F){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
    WriteCommandVargs(CASET, 0x00, RowStart, 0x00, RowEnd);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	2100      	movs	r1, #0
 8000d38:	202a      	movs	r0, #42	@ 0x2a
 8000d3a:	f000 fb69 	bl	8001410 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>
    WriteCommandVargs(RASET, 0x00, ColStart, 0x00, ColEnd);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	2100      	movs	r1, #0
 8000d48:	202b      	movs	r0, #43	@ 0x2b
 8000d4a:	f000 fb61 	bl	8001410 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <_Z9DrawPixeliiji>:

void DrawPixel(int x, int y, unsigned int Color, int thickness = 2){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
    for(int Xoff = 0; Xoff < thickness; Xoff++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e02a      	b.n	8000dc2 <_Z9DrawPixeliiji+0x6a>
        for(int Yoff = 0; Yoff < thickness; Yoff++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	e020      	b.n	8000db4 <_Z9DrawPixeliiji+0x5c>
            SetAddr(x+Xoff,y+Yoff);
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	18d0      	adds	r0, r2, r3
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	18d1      	adds	r1, r2, r3
 8000d7e:	239f      	movs	r3, #159	@ 0x9f
 8000d80:	227f      	movs	r2, #127	@ 0x7f
 8000d82:	f7ff ffcd 	bl	8000d20 <_Z7SetAddriiii>
            WriteCommand(RAMWR);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	202c      	movs	r0, #44	@ 0x2c
 8000d8c:	f7ff ff0c 	bl	8000ba8 <_Z12WriteCommandhPhh>
            uint8_t Transfer[] = {(Color & 0xFF00) >> 8,  Color & 0xFF};
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	753b      	strb	r3, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	757b      	strb	r3, [r7, #21]
            HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Transfer, 2, 100);
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <_Z9DrawPixeliiji+0x7c>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	f107 0114 	add.w	r1, r7, #20
 8000da6:	2364      	movs	r3, #100	@ 0x64
 8000da8:	2202      	movs	r2, #2
 8000daa:	f002 f81c 	bl	8002de6 <HAL_SPI_Transmit>
        for(int Yoff = 0; Yoff < thickness; Yoff++){
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	3301      	adds	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbda      	blt.n	8000d72 <_Z9DrawPixeliiji+0x1a>
    for(int Xoff = 0; Xoff < thickness; Xoff++){
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbd0      	blt.n	8000d6c <_Z9DrawPixeliiji+0x14>
        }
    }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000008c 	.word	0x2000008c

08000dd8 <_Z8DrawLineiiiij>:

void DrawLine(int StartX, int StartY, int EndX, int EndY, unsigned int Color){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	@ 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
    if(( (abs(EndX - StartX) >= abs(EndY-StartY)) && (EndX < StartX) ) || ( ((abs(EndX - StartX) < abs(EndY-StartY)) && (EndY < StartY))) ){
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000df0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1acb      	subs	r3, r1, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bfb8      	it	lt
 8000dfe:	425b      	neglt	r3, r3
 8000e00:	429a      	cmp	r2, r3
 8000e02:	db03      	blt.n	8000e0c <_Z8DrawLineiiiij+0x34>
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	db12      	blt.n	8000e32 <_Z8DrawLineiiiij+0x5a>
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfb8      	it	lt
 8000e24:	425b      	neglt	r3, r3
 8000e26:	429a      	cmp	r2, r3
 8000e28:	da11      	bge.n	8000e4e <_Z8DrawLineiiiij+0x76>
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	da0d      	bge.n	8000e4e <_Z8DrawLineiiiij+0x76>
      Swap<int>(StartX, EndX);
 8000e32:	1d3a      	adds	r2, r7, #4
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fb10 	bl	8001460 <_Z4SwapIiEvRT_S1_>
      Swap<int>(StartY, EndY);
 8000e40:	463a      	mov	r2, r7
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fb09 	bl	8001460 <_Z4SwapIiEvRT_S1_>
    }
    int Cycles = max((EndX - StartX),(EndY - StartY));
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bfb8      	it	lt
 8000e66:	425b      	neglt	r3, r3
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bfb8      	it	lt
 8000e6c:	4613      	movlt	r3, r2
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float Slope = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    int StartMapping[] = {StartX, StartY};
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	623b      	str	r3, [r7, #32]
    int CoordMapping[] = {0,0}, defau_map = 1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	2301      	movs	r3, #1
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (abs(EndY - StartY) > abs(EndX - StartX)){ //if line is longer vertically rise > run
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e94:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfb8      	it	lt
 8000ea2:	425b      	neglt	r3, r3
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd16      	ble.n	8000ed6 <_Z8DrawLineiiiij+0xfe>
        if (EndY-StartY != 0){
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d02a      	beq.n	8000f06 <_Z8DrawLineiiiij+0x12e>
            Slope = float((EndX - StartX))/(EndY-StartY);
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000ed4:	e017      	b.n	8000f06 <_Z8DrawLineiiiij+0x12e>
        }
    }else{
        if (EndX - StartX != 0){
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d011      	beq.n	8000f02 <_Z8DrawLineiiiij+0x12a>
            Slope = float((EndY-StartY))/(EndX - StartX);
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        }
        defau_map = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    for(int i = 0; i <= Cycles; i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0a:	e045      	b.n	8000f98 <_Z8DrawLineiiiij+0x1c0>
        int opp_map = 1 - defau_map;
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f0e:	f1c3 0301 	rsb	r3, r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
        CoordMapping[defau_map] = int(StartMapping[defau_map] + i); //default: CoordMapping[x,y] modified:CoordMapping[y,x]
 8000f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3338      	adds	r3, #56	@ 0x38
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f22:	441a      	add	r2, r3
 8000f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	3338      	adds	r3, #56	@ 0x38
 8000f2a:	443b      	add	r3, r7
 8000f2c:	f843 2c24 	str.w	r2, [r3, #-36]
        CoordMapping[opp_map] = int(StartMapping[opp_map] + i*Slope);
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3338      	adds	r3, #56	@ 0x38
 8000f36:	443b      	add	r3, r7
 8000f38:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5e:	ee17 2a90 	vmov	r2, s15
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	3338      	adds	r3, #56	@ 0x38
 8000f68:	443b      	add	r3, r7
 8000f6a:	f843 2c24 	str.w	r2, [r3, #-36]

        if(CoordMapping[0] >= 0 && CoordMapping[0] < 160 && CoordMapping[1] >= 0 && CoordMapping[1] < 128)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0e      	blt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f78:	dc0b      	bgt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db08      	blt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f84:	dc05      	bgt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
        DrawPixel(CoordMapping[0], CoordMapping[1], Color);
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f8e:	f7ff fee3 	bl	8000d58 <_Z9DrawPixeliiji>
    for(int i = 0; i <= Cycles; i++){
 8000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f94:	3301      	adds	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	ddb5      	ble.n	8000f0c <_Z8DrawLineiiiij+0x134>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3738      	adds	r7, #56	@ 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <_Z11DrawEllipseiiiiii>:
    DrawLine(StartX, StartY, StartX, EndY, Color);
    DrawLine(StartX, EndY, EndX,EndY, Color);
    DrawLine(EndX, StartY, EndX, EndY, Color);
}

void DrawEllipse(int StartX, int StartY, int EndX, int EndY, int Color, int mapping){
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	ed2d 8b02 	vpush	{d8}
 8000fb2:	b09e      	sub	sp, #120	@ 0x78
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
    if((abs(EndX - StartX) >= abs(EndY-StartY) && EndX < StartX) || (abs(EndX - StartX) < abs(EndY-StartY) && EndY < StartY)){
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfb8      	it	lt
 8000fd6:	425b      	neglt	r3, r3
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	db03      	blt.n	8000fe4 <_Z11DrawEllipseiiiiii+0x38>
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	db12      	blt.n	800100a <_Z11DrawEllipseiiiiii+0x5e>
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bfb8      	it	lt
 8000ffc:	425b      	neglt	r3, r3
 8000ffe:	429a      	cmp	r2, r3
 8001000:	da11      	bge.n	8001026 <_Z11DrawEllipseiiiiii+0x7a>
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	429a      	cmp	r2, r3
 8001008:	da0d      	bge.n	8001026 <_Z11DrawEllipseiiiiii+0x7a>
        Swap<int>(StartX, EndX);
 800100a:	1d3a      	adds	r2, r7, #4
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa24 	bl	8001460 <_Z4SwapIiEvRT_S1_>
        Swap<int>(StartY, EndY);
 8001018:	463a      	mov	r2, r7
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fa1d 	bl	8001460 <_Z4SwapIiEvRT_S1_>
    }
    int Cycles[2] = {(EndX - StartX),(EndY - StartY)};
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
    int Center[2] = {(StartX+EndX)/2,(StartY+EndY)/2};
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	0fda      	lsrs	r2, r3, #31
 800103e:	4413      	add	r3, r2
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	0fda      	lsrs	r2, r3, #31
 800104c:	4413      	add	r3, r2
 800104e:	105b      	asrs	r3, r3, #1
 8001050:	643b      	str	r3, [r7, #64]	@ 0x40
    int Offset[2] = {abs(StartX-EndX)/2,abs(StartY-EndY)/2};
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	0fda      	lsrs	r2, r3, #31
 8001060:	4413      	add	r3, r2
 8001062:	105b      	asrs	r3, r3, #1
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	bfb8      	it	lt
 8001070:	425b      	neglt	r3, r3
 8001072:	0fda      	lsrs	r2, r3, #31
 8001074:	4413      	add	r3, r2
 8001076:	105b      	asrs	r3, r3, #1
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
    int VertexA = abs(EndX-StartX)/2, VertexB = abs(EndY-StartY)/2;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	0fda      	lsrs	r2, r3, #31
 8001088:	4413      	add	r3, r2
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	663b      	str	r3, [r7, #96]	@ 0x60
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	bfb8      	it	lt
 8001098:	425b      	neglt	r3, r3
 800109a:	0fda      	lsrs	r2, r3, #31
 800109c:	4413      	add	r3, r2
 800109e:	105b      	asrs	r3, r3, #1
 80010a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int Verticies[2] = {VertexA, VertexB};
 80010a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
    int CoordMapping[2] = {0,0}, defau_map = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010b2:	2300      	movs	r3, #0
 80010b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (abs(EndY - StartY) > abs(EndX - StartX)){ //if line is longer vertically rise > run
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1acb      	subs	r3, r1, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bfb8      	it	lt
 80010ce:	425b      	neglt	r3, r3
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dd01      	ble.n	80010d8 <_Z11DrawEllipseiiiiii+0x12c>
        defau_map = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if(mapping != -1){
 80010d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d003      	beq.n	80010ea <_Z11DrawEllipseiiiiii+0x13e>
        defau_map = mapping;
 80010e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010e8:	e00d      	b.n	8001106 <_Z11DrawEllipseiiiiii+0x15a>
    }else{
        DrawEllipse(StartX, StartY, EndX, EndY, Color, 1 - defau_map);
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	683c      	ldr	r4, [r7, #0]
 80010f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010f4:	f1c3 0301 	rsb	r3, r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4623      	mov	r3, r4
 8001102:	f7ff ff53 	bl	8000fac <_Z11DrawEllipseiiiiii>
    }
    int opp_map = 1 - defau_map;
 8001106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001108:	f1c3 0301 	rsb	r3, r3, #1
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(int i = 0; i <= Cycles[defau_map]; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001112:	e0ec      	b.n	80012ee <_Z11DrawEllipseiiiiii+0x342>
        CoordMapping[defau_map] = int(i); //default: CoordMapping[x,y] modified:CoordMapping[y,x]
 8001114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	3370      	adds	r3, #112	@ 0x70
 800111a:	443b      	add	r3, r7
 800111c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800111e:	f843 2c4c 	str.w	r2, [r3, #-76]
        int X = CoordMapping[defau_map];
 8001122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3370      	adds	r3, #112	@ 0x70
 8001128:	443b      	add	r3, r7
 800112a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800112e:	657b      	str	r3, [r7, #84]	@ 0x54
        CoordMapping[opp_map] = sqrt(((1.0 - float( pow(X-Verticies[defau_map],2)) /(  float(pow(Verticies[defau_map],2)) ))) * pow(float(Verticies[opp_map]),2));
 8001130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3370      	adds	r3, #112	@ 0x70
 8001136:	443b      	add	r3, r7
 8001138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800113c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f9a1 	bl	800148a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001148:	ec53 2b10 	vmov	r2, r3, d0
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fcd2 	bl	8000af8 <__aeabi_d2f>
 8001154:	ee08 0a10 	vmov	s16, r0
 8001158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	3370      	adds	r3, #112	@ 0x70
 800115e:	443b      	add	r3, r7
 8001160:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f98f 	bl	800148a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800116c:	ec53 2b10 	vmov	r2, r3, d0
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcc0 	bl	8000af8 <__aeabi_d2f>
 8001178:	ee07 0a10 	vmov	s14, r0
 800117c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001180:	ee17 0a90 	vmov	r0, s15
 8001184:	f7ff f988 	bl	8000498 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	495f      	ldr	r1, [pc, #380]	@ (8001310 <_Z11DrawEllipseiiiiii+0x364>)
 8001192:	f7ff f821 	bl	80001d8 <__aeabi_dsub>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4614      	mov	r4, r2
 800119c:	461d      	mov	r5, r3
 800119e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3370      	adds	r3, #112	@ 0x70
 80011a4:	443b      	add	r3, r7
 80011a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	2002      	movs	r0, #2
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f000 f987 	bl	80014ca <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011bc:	ec53 2b10 	vmov	r2, r3, d0
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f9c0 	bl	8000548 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ec43 2b17 	vmov	d7, r2, r3
 80011d0:	eeb0 0a47 	vmov.f32	s0, s14
 80011d4:	eef0 0a67 	vmov.f32	s1, s15
 80011d8:	f002 f94e 	bl	8003478 <sqrt>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc60 	bl	8000aa8 <__aeabi_d2iz>
 80011e8:	4602      	mov	r2, r0
 80011ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	3370      	adds	r3, #112	@ 0x70
 80011f0:	443b      	add	r3, r7
 80011f2:	f843 2c4c 	str.w	r2, [r3, #-76]

        for(int j = 1; j > -2; j-=2){
 80011f6:	2301      	movs	r3, #1
 80011f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80011fa:	e071      	b.n	80012e0 <_Z11DrawEllipseiiiiii+0x334>
            int OffsetMapping[2] = {0, 0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
            OffsetMapping[defau_map] = -Offset[defau_map];
 8001204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	3370      	adds	r3, #112	@ 0x70
 800120a:	443b      	add	r3, r7
 800120c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001210:	425a      	negs	r2, r3
 8001212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3370      	adds	r3, #112	@ 0x70
 8001218:	443b      	add	r3, r7
 800121a:	f843 2c54 	str.w	r2, [r3, #-84]
            int OutputMapping[] = {0,0};
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
            CoordMapping[opp_map] *= j;
 8001226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	3370      	adds	r3, #112	@ 0x70
 800122c:	443b      	add	r3, r7
 800122e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001232:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	3370      	adds	r3, #112	@ 0x70
 800123e:	443b      	add	r3, r7
 8001240:	f843 2c4c 	str.w	r2, [r3, #-76]
            OutputMapping[defau_map] = Center[defau_map] + CoordMapping[defau_map] + OffsetMapping[defau_map];
 8001244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3370      	adds	r3, #112	@ 0x70
 800124a:	443b      	add	r3, r7
 800124c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3370      	adds	r3, #112	@ 0x70
 8001256:	443b      	add	r3, r7
 8001258:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800125c:	441a      	add	r2, r3
 800125e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	3370      	adds	r3, #112	@ 0x70
 8001264:	443b      	add	r3, r7
 8001266:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800126a:	441a      	add	r2, r3
 800126c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	3370      	adds	r3, #112	@ 0x70
 8001272:	443b      	add	r3, r7
 8001274:	f843 2c5c 	str.w	r2, [r3, #-92]
            OutputMapping[opp_map] = Center[opp_map] + CoordMapping[opp_map] + OffsetMapping[opp_map];
 8001278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3370      	adds	r3, #112	@ 0x70
 800127e:	443b      	add	r3, r7
 8001280:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3370      	adds	r3, #112	@ 0x70
 800128a:	443b      	add	r3, r7
 800128c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001290:	441a      	add	r2, r3
 8001292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3370      	adds	r3, #112	@ 0x70
 8001298:	443b      	add	r3, r7
 800129a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800129e:	441a      	add	r2, r3
 80012a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	3370      	adds	r3, #112	@ 0x70
 80012a6:	443b      	add	r3, r7
 80012a8:	f843 2c5c 	str.w	r2, [r3, #-92]
            int XCoord = OutputMapping[0], YCoord = OutputMapping[1];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if(XCoord >= 0 && XCoord < 160 && YCoord >= 0 && YCoord < 128)
 80012b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0f      	blt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012bc:	2b9f      	cmp	r3, #159	@ 0x9f
 80012be:	dc0c      	bgt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db09      	blt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ca:	dc06      	bgt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
              DrawPixel(XCoord, YCoord, Color, 2);
 80012cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80012d0:	2302      	movs	r3, #2
 80012d2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80012d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012d6:	f7ff fd3f 	bl	8000d58 <_Z9DrawPixeliiji>
        for(int j = 1; j > -2; j-=2){
 80012da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012dc:	3b02      	subs	r3, #2
 80012de:	667b      	str	r3, [r7, #100]	@ 0x64
 80012e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	da89      	bge.n	80011fc <_Z11DrawEllipseiiiiii+0x250>
    for(int i = 0; i <= Cycles[defau_map]; i++){
 80012e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012ea:	3301      	adds	r3, #1
 80012ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	3370      	adds	r3, #112	@ 0x70
 80012f4:	443b      	add	r3, r7
 80012f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80012fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f77f af09 	ble.w	8001114 <_Z11DrawEllipseiiiiii+0x168>
        }
    }
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3770      	adds	r7, #112	@ 0x70
 8001308:	46bd      	mov	sp, r7
 800130a:	ecbd 8b02 	vpop	{d8}
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	3ff00000 	.word	0x3ff00000

08001314 <_Z8GenColorjjj>:

unsigned int GenColor(unsigned int R, unsigned int G, unsigned int B){
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    R = R <= 0x1F ? R : 0x1F;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b1f      	cmp	r3, #31
 8001324:	bf28      	it	cs
 8001326:	231f      	movcs	r3, #31
 8001328:	60fb      	str	r3, [r7, #12]
    G = G <= 0x3F ? G : 0x3F;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b3f      	cmp	r3, #63	@ 0x3f
 800132e:	bf28      	it	cs
 8001330:	233f      	movcs	r3, #63	@ 0x3f
 8001332:	60bb      	str	r3, [r7, #8]
    B = B <= 0x1F ? B : 0x1F;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b1f      	cmp	r3, #31
 8001338:	bf28      	it	cs
 800133a:	231f      	movcs	r3, #31
 800133c:	607b      	str	r3, [r7, #4]
    return((R<<11) + (G<<5) + B);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	02da      	lsls	r2, r3, #11
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	441a      	add	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4413      	add	r3, r2
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_Z10ColorRatiofff>:

unsigned int ColorRatio(float R, float G, float B){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001362:	edc7 0a02 	vstr	s1, [r7, #8]
 8001366:	ed87 1a01 	vstr	s2, [r7, #4]
    R = R <= 1.0 ? R : 1.0;
 800136a:	edd7 7a03 	vldr	s15, [r7, #12]
 800136e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	d801      	bhi.n	8001380 <_Z10ColorRatiofff+0x28>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	e001      	b.n	8001384 <_Z10ColorRatiofff+0x2c>
 8001380:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001384:	60fb      	str	r3, [r7, #12]
    G = G <= 1.0 ? G : 1.0;
 8001386:	edd7 7a02 	vldr	s15, [r7, #8]
 800138a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d801      	bhi.n	800139c <_Z10ColorRatiofff+0x44>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	e001      	b.n	80013a0 <_Z10ColorRatiofff+0x48>
 800139c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013a0:	60bb      	str	r3, [r7, #8]
    B = B <= 1.0 ? B : 1.0;
 80013a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d801      	bhi.n	80013b8 <_Z10ColorRatiofff+0x60>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	e001      	b.n	80013bc <_Z10ColorRatiofff+0x64>
 80013b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013bc:	607b      	str	r3, [r7, #4]
    return GenColor(int(R * 31), int(G * 63), int(B * 31));
 80013be:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c2:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800140c <_Z10ColorRatiofff+0xb4>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 1a90 	vmov	r1, s15
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f6:	ee17 2a90 	vmov	r2, s15
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff8a 	bl	8001314 <_Z8GenColorjjj>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	427c0000 	.word	0x427c0000

08001410 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>:
void WriteCommandVargs(command Command, VarArgs... Args){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x48>)
 8001424:	f000 fdc0 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x4c>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f107 010c 	add.w	r1, r7, #12
 8001430:	2364      	movs	r3, #100	@ 0x64
 8001432:	2201      	movs	r2, #1
 8001434:	f001 fcd7 	bl	8002de6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2101      	movs	r1, #1
 800143c:	4806      	ldr	r0, [pc, #24]	@ (8001458 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x48>)
 800143e:	f000 fdb3 	bl	8001fa8 <HAL_GPIO_WritePin>
    WriteParams(Args...);
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f000 f85f 	bl	800150c <_Z11WriteParamsIiJiiiEEvT_DpT0_>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400
 800145c:	2000008c 	.word	0x2000008c

08001460 <_Z4SwapIiEvRT_S1_>:
void Swap(type &a, type &b){
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
    type c = a;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
    a = b;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]
    b = c;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	601a      	str	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800148a:	b5b0      	push	{r4, r5, r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7fe ffed 	bl	8000474 <__aeabi_i2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	6838      	ldr	r0, [r7, #0]
 80014a0:	f7fe ffe8 	bl	8000474 <__aeabi_i2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	ec43 2b11 	vmov	d1, r2, r3
 80014ac:	ec45 4b10 	vmov	d0, r4, r5
 80014b0:	f001 ff72 	bl	8003398 <pow>
 80014b4:	eeb0 7a40 	vmov.f32	s14, s0
 80014b8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	eef0 0a67 	vmov.f32	s1, s15
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdb0      	pop	{r4, r5, r7, pc}

080014ca <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80014ca:	b5b0      	push	{r4, r5, r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80014d4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7fe ffde 	bl	8000498 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f7fe ffc7 	bl	8000474 <__aeabi_i2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	ec43 2b11 	vmov	d1, r2, r3
 80014ee:	ec45 4b10 	vmov	d0, r4, r5
 80014f2:	f001 ff51 	bl	8003398 <pow>
 80014f6:	eeb0 7a40 	vmov.f32	s14, s0
 80014fa:	eef0 7a60 	vmov.f32	s15, s1
    }
 80014fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001502:	eef0 0a67 	vmov.f32	s1, s15
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bdb0      	pop	{r4, r5, r7, pc}

0800150c <_Z11WriteParamsIiJiiiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_Z11WriteParamsIiJiiiEEvT_DpT0_+0x30>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f107 010c 	add.w	r1, r7, #12
 8001522:	2364      	movs	r3, #100	@ 0x64
 8001524:	2201      	movs	r2, #1
 8001526:	f001 fc5e 	bl	8002de6 <HAL_SPI_Transmit>
    WriteParams(Args...);
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f000 f806 	bl	8001540 <_Z11WriteParamsIiJiiEEvT_DpT0_>
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000008c 	.word	0x2000008c

08001540 <_Z11WriteParamsIiJiiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_Z11WriteParamsIiJiiEEvT_DpT0_+0x2c>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	f107 010c 	add.w	r1, r7, #12
 8001554:	2364      	movs	r3, #100	@ 0x64
 8001556:	2201      	movs	r2, #1
 8001558:	f001 fc45 	bl	8002de6 <HAL_SPI_Transmit>
    WriteParams(Args...);
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f000 f806 	bl	8001570 <_Z11WriteParamsIiJiEEvT_DpT0_>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000008c 	.word	0x2000008c

08001570 <_Z11WriteParamsIiJiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <_Z11WriteParamsIiJiEEvT_DpT0_+0x28>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	1d39      	adds	r1, r7, #4
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	2201      	movs	r2, #1
 8001584:	f001 fc2f 	bl	8002de6 <HAL_SPI_Transmit>
    WriteParams(Args...);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f000 f807 	bl	800159c <_Z11WriteParamsIiJEEvT_DpT0_>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000008c 	.word	0x2000008c

0800159c <_Z11WriteParamsIiJEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <_Z11WriteParamsIiJEEvT_DpT0_+0x24>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	1d39      	adds	r1, r7, #4
 80015aa:	2364      	movs	r3, #100	@ 0x64
 80015ac:	2201      	movs	r2, #1
 80015ae:	f001 fc1a 	bl	8002de6 <HAL_SPI_Transmit>
    WriteParams(Args...);
 80015b2:	f7ff faf1 	bl	8000b98 <_Z11WriteParamsv>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000008c 	.word	0x2000008c

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f000 fa04 	bl	80019d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f847 	bl	8001660 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d2:	f000 f8eb 	bl	80017ac <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80015d6:	f000 f8a5 	bl	8001724 <_ZL12MX_SPI1_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DisplayInit(&hspi1);
 80015da:	481c      	ldr	r0, [pc, #112]	@ (800164c <main+0x88>)
 80015dc:	f7ff fb2e 	bl	8000c3c <_Z11DisplayInitP19__SPI_HandleTypeDef>
  DrawLine(0,64,159,64,ColorRatio(0.2, 0.3, 0.4));
 80015e0:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8001650 <main+0x8c>
 80015e4:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001654 <main+0x90>
 80015e8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001658 <main+0x94>
 80015ec:	f7ff feb4 	bl	8001358 <_Z10ColorRatiofff>
 80015f0:	4603      	mov	r3, r0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2340      	movs	r3, #64	@ 0x40
 80015f6:	229f      	movs	r2, #159	@ 0x9f
 80015f8:	2140      	movs	r1, #64	@ 0x40
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fbec 	bl	8000dd8 <_Z8DrawLineiiiij>
  DrawLine(80,0,80,127,ColorRatio(0.2, 0.3, 0.4));
 8001600:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001650 <main+0x8c>
 8001604:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001654 <main+0x90>
 8001608:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001658 <main+0x94>
 800160c:	f7ff fea4 	bl	8001358 <_Z10ColorRatiofff>
 8001610:	4603      	mov	r3, r0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	237f      	movs	r3, #127	@ 0x7f
 8001616:	2250      	movs	r2, #80	@ 0x50
 8001618:	2100      	movs	r1, #0
 800161a:	2050      	movs	r0, #80	@ 0x50
 800161c:	f7ff fbdc 	bl	8000dd8 <_Z8DrawLineiiiij>
  DrawEllipse(0,0,159,127,ColorRatio(0.9, 0.3, 0.4));
 8001620:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8001650 <main+0x8c>
 8001624:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001654 <main+0x90>
 8001628:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800165c <main+0x98>
 800162c:	f7ff fe94 	bl	8001358 <_Z10ColorRatiofff>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	237f      	movs	r3, #127	@ 0x7f
 800163e:	229f      	movs	r2, #159	@ 0x9f
 8001640:	2100      	movs	r1, #0
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fcb2 	bl	8000fac <_Z11DrawEllipseiiiiii>
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <main+0x84>
 800164c:	20000090 	.word	0x20000090
 8001650:	3ecccccd 	.word	0x3ecccccd
 8001654:	3e99999a 	.word	0x3e99999a
 8001658:	3e4ccccd 	.word	0x3e4ccccd
 800165c:	3f666666 	.word	0x3f666666

08001660 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b096      	sub	sp, #88	@ 0x58
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2244      	movs	r2, #68	@ 0x44
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fe1e 	bl	80042b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001682:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001686:	f000 fcb5 	bl	8001ff4 <HAL_PWREx_ControlVoltageScaling>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800169a:	f000 f8c5 	bl	8001828 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800169e:	2310      	movs	r3, #16
 80016a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016aa:	2360      	movs	r3, #96	@ 0x60
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016ba:	2314      	movs	r3, #20
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016be:	2307      	movs	r3, #7
 80016c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fce6 	bl	80020a0 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80016e4:	f000 f8a0 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2303      	movs	r3, #3
 80016ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	2102      	movs	r1, #2
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f8e1 	bl	80028c8 <HAL_RCC_ClockConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001716:	f000 f887 	bl	8001828 <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3758      	adds	r7, #88	@ 0x58
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 800172a:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <_ZL12MX_SPI1_Initv+0x84>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001738:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800173c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001740:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 800175c:	2210      	movs	r2, #16
 800175e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001774:	2207      	movs	r2, #7
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 800177a:	2200      	movs	r2, #0
 800177c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001780:	2208      	movs	r2, #8
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <_ZL12MX_SPI1_Initv+0x80>)
 8001786:	f001 fa8b 	bl	8002ca0 <HAL_SPI_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZL12MX_SPI1_Initv+0x7a>
  {
    Error_Handler();
 800179a:	f000 f845 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000090 	.word	0x20000090
 80017a8:	40013000 	.word	0x40013000

080017ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <_ZL12MX_GPIO_Initv+0x74>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	21c1      	movs	r1, #193	@ 0xc1
 80017f6:	480b      	ldr	r0, [pc, #44]	@ (8001824 <_ZL12MX_GPIO_Initv+0x78>)
 80017f8:	f000 fbd6 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80017fc:	23c1      	movs	r3, #193	@ 0xc1
 80017fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4804      	ldr	r0, [pc, #16]	@ (8001824 <_ZL12MX_GPIO_Initv+0x78>)
 8001814:	f000 fa5e 	bl	8001cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <Error_Handler+0x8>

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_MspInit+0x44>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183e:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6613      	str	r3, [r2, #96]	@ 0x60
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_MspInit+0x44>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_MspInit+0x44>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_MspInit+0x44>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_MspInit+0x44>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_SPI_MspInit+0x7c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d128      	bne.n	80018f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a2:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_SPI_MspInit+0x80>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80018ce:	2382      	movs	r3, #130	@ 0x82
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018de:	2305      	movs	r3, #5
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f000 f9f2 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <NMI_Handler+0x4>

08001908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <MemManage_Handler+0x4>

08001918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <UsageFault_Handler+0x4>

08001928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001956:	f000 f893 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001988:	f7ff ffea 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	@ (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f002 fc8b 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b6:	f7ff fe05 	bl	80015c4 <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019c8:	080043c8 	.word	0x080043c8
  ldr r2, =_sbss
 80019cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d0:	20000230 	.word	0x20000230

080019d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_IRQHandler>

080019d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f943 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f80e 	bl	8001a08 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	e001      	b.n	80019fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f8:	f7ff ff1c 	bl	8001834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HAL_InitTick+0x6c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d023      	beq.n	8001a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_InitTick+0x70>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <HAL_InitTick+0x6c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f941 	bl	8001cba <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d809      	bhi.n	8001a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f919 	bl	8001c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <HAL_InitTick+0x74>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e007      	b.n	8001a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e004      	b.n	8001a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e001      	b.n	8001a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	200000f4 	.word	0x200000f4

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200000f4 	.word	0x200000f4

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff ffee 	bl	8001aa8 <HAL_GetTick>
 8001acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ffde 	bl	8001aa8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff47 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5c 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb0 	bl	8001c28 <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce2:	e148      	b.n	8001f76 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 813a 	beq.w	8001f70 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d005      	beq.n	8001d14 <HAL_GPIO_Init+0x40>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d130      	bne.n	8001d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	f003 0201 	and.w	r2, r3, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d017      	beq.n	8001db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d123      	bne.n	8001e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8094 	beq.w	8001f70 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e48:	4b52      	ldr	r3, [pc, #328]	@ (8001f94 <HAL_GPIO_Init+0x2c0>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4c:	4a51      	ldr	r2, [pc, #324]	@ (8001f94 <HAL_GPIO_Init+0x2c0>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e54:	4b4f      	ldr	r3, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x2c0>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e60:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_GPIO_Init+0x2c4>)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1d4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a43      	ldr	r2, [pc, #268]	@ (8001f9c <HAL_GPIO_Init+0x2c8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1d0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a42      	ldr	r2, [pc, #264]	@ (8001fa0 <HAL_GPIO_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1cc>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e004      	b.n	8001eaa <HAL_GPIO_Init+0x1d6>
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0x1d6>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_GPIO_Init+0x1d6>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4093      	lsls	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eba:	4937      	ldr	r1, [pc, #220]	@ (8001f98 <HAL_GPIO_Init+0x2c4>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eec:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f16:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aeaf 	bne.w	8001ce4 <HAL_GPIO_Init+0x10>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002002:	d130      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d038      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201a:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2232      	movs	r2, #50	@ 0x32
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002038:	e002      	b.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3b01      	subs	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204c:	d102      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x60>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f2      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002060:	d110      	bne.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e00f      	b.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002072:	d007      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800207c:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83

080020a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 bc02 	b.w	80028b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b96      	ldr	r3, [pc, #600]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020be:	4b94      	ldr	r3, [pc, #592]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e4 	beq.w	800229e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_RCC_OscConfig+0x4c>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f040 808b 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 8087 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ec:	4b88      	ldr	r3, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x64>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e3d9      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4b81      	ldr	r3, [pc, #516]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_RCC_OscConfig+0x7e>
 8002114:	4b7e      	ldr	r3, [pc, #504]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211c:	e005      	b.n	800212a <HAL_RCC_OscConfig+0x8a>
 800211e:	4b7c      	ldr	r3, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800212a:	4293      	cmp	r3, r2
 800212c:	d223      	bcs.n	8002176 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fd54 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e3ba      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	4b73      	ldr	r3, [pc, #460]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	496d      	ldr	r1, [pc, #436]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	4b6b      	ldr	r3, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4968      	ldr	r1, [pc, #416]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e025      	b.n	80021c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002176:	4b66      	ldr	r3, [pc, #408]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4960      	ldr	r1, [pc, #384]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002194:	4b5e      	ldr	r3, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	495b      	ldr	r1, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd14 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e37a      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c2:	f000 fc81 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4950      	ldr	r1, [pc, #320]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <HAL_RCC_OscConfig+0x278>)
 80021e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	@ (800231c <HAL_RCC_OscConfig+0x27c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fc0e 	bl	8001a08 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d052      	beq.n	800229c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	e35e      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002202:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a42      	ldr	r2, [pc, #264]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220e:	f7ff fc4b 	bl	8001aa8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7ff fc47 	bl	8001aa8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e347      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a35      	ldr	r2, [pc, #212]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4930      	ldr	r1, [pc, #192]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002252:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	492b      	ldr	r1, [pc, #172]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
 8002266:	e01a      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002268:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002274:	f7ff fc18 	bl	8001aa8 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227c:	f7ff fc14 	bl	8001aa8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e314      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1dc>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d073      	beq.n	8002392 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x21c>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d063      	beq.n	8002390 <HAL_RCC_OscConfig+0x2f0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15f      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2f1      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x24c>
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e025      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_OscConfig+0x280>
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a02      	ldr	r2, [pc, #8]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 8002310:	40021000 	.word	0x40021000
 8002314:	0800434c 	.word	0x0800434c
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004
 8002320:	4ba0      	ldr	r3, [pc, #640]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a9f      	ldr	r2, [pc, #636]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b9d      	ldr	r3, [pc, #628]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a9c      	ldr	r2, [pc, #624]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fbb2 	bl	8001aa8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fbae 	bl	8001aa8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2ae      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b92      	ldr	r3, [pc, #584]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2a8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff fb9e 	bl	8001aa8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fb9a 	bl	8001aa8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e29a      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d0>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x310>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d119      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d116      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b7c      	ldr	r3, [pc, #496]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x328>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e277      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4973      	ldr	r1, [pc, #460]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e040      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7ff fb59 	bl	8001aa8 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff fb55 	bl	8001aa8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e255      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b62      	ldr	r3, [pc, #392]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	495f      	ldr	r1, [pc, #380]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b5d      	ldr	r3, [pc, #372]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5c      	ldr	r2, [pc, #368]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff fb35 	bl	8001aa8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fb31 	bl	8001aa8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e231      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4b4b      	ldr	r3, [pc, #300]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247a:	4a4a      	ldr	r2, [pc, #296]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff fb10 	bl	8001aa8 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff fb0c 	bl	8001aa8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e20c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x3ec>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b4:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff faf3 	bl	8001aa8 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff faef 	bl	8001aa8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1ef      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002510:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_RCC_OscConfig+0x508>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7ff fab6 	bl	8001aa8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7ff fab2 	bl	8001aa8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1b2      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d8>
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002576:	e029      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x50c>
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	4a03      	ldr	r2, [pc, #12]	@ (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	4a99      	ldr	r2, [pc, #612]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025bc:	4b96      	ldr	r3, [pc, #600]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	4a95      	ldr	r2, [pc, #596]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff fa68 	bl	8001aa8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7ff fa64 	bl	8001aa8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e162      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b89      	ldr	r3, [pc, #548]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_OscConfig+0x53c>
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fa51 	bl	8001aa8 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7ff fa4d 	bl	8001aa8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e14b      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	4b7d      	ldr	r3, [pc, #500]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ed      	bne.n	800260a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b78      	ldr	r3, [pc, #480]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	4a77      	ldr	r2, [pc, #476]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002654:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800265a:	4a6f      	ldr	r2, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff fa20 	bl	8001aa8 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266c:	f7ff fa1c 	bl	8001aa8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e11c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267e:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002680:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x5cc>
 800268c:	e01b      	b.n	80026c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800268e:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002694:	4a60      	ldr	r2, [pc, #384]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7ff fa03 	bl	8001aa8 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a6:	f7ff f9ff 	bl	8001aa8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ff      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b8:	4b57      	ldr	r3, [pc, #348]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80026ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80f3 	beq.w	80028b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80c9 	bne.w	800286c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026da:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d12c      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	3b01      	subs	r3, #1
 80026fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d123      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d11b      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d113      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d109      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d06b      	beq.n	8002820 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d062      	beq.n	8002814 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800274e:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0ac      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800275e:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2d      	ldr	r2, [pc, #180]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002768:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800276a:	f7ff f99d 	bl	8001aa8 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7ff f999 	bl	8001aa8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e099      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4b21      	ldr	r3, [pc, #132]	@ (800281c <HAL_RCC_OscConfig+0x77c>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027aa:	0212      	lsls	r2, r2, #8
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027b2:	0852      	lsrs	r2, r2, #1
 80027b4:	3a01      	subs	r2, #1
 80027b6:	0552      	lsls	r2, r2, #21
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0652      	lsls	r2, r2, #25
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027ca:	06d2      	lsls	r2, r2, #27
 80027cc:	430a      	orrs	r2, r1
 80027ce:	4912      	ldr	r1, [pc, #72]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027d4:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ec:	f7ff f95c 	bl	8001aa8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff f958 	bl	8001aa8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e058      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_RCC_OscConfig+0x778>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002812:	e050      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04f      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
 8002818:	40021000 	.word	0x40021000
 800281c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002820:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d144      	bne.n	80028b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a20      	ldr	r2, [pc, #128]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002842:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002844:	f7ff f930 	bl	8001aa8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7ff f92c 	bl	8001aa8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e02c      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x7ac>
 800286a:	e024      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d01f      	beq.n	80028b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 8002878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7ff f913 	bl	8001aa8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff f90f 	bl	8001aa8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e00f      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4905      	ldr	r1, [pc, #20]	@ (80028c0 <HAL_RCC_OscConfig+0x820>)
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_OscConfig+0x824>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
 80028b0:	e001      	b.n	80028b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	feeefffc 	.word	0xfeeefffc

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0e7      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b75      	ldr	r3, [pc, #468]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4970      	ldr	r1, [pc, #448]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cf      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002924:	429a      	cmp	r2, r3
 8002926:	d908      	bls.n	800293a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4960      	ldr	r1, [pc, #384]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d04c      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d121      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0a6      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	4b54      	ldr	r3, [pc, #336]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e09a      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e08e      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e086      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b46      	ldr	r3, [pc, #280]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4943      	ldr	r1, [pc, #268]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7ff f87a 	bl	8001aa8 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff f876 	bl	8001aa8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e06e      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	492b      	ldr	r1, [pc, #172]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0e:	4b29      	ldr	r3, [pc, #164]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d210      	bcs.n	8002a3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1c:	4b25      	ldr	r3, [pc, #148]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 0207 	bic.w	r2, r3, #7
 8002a24:	4923      	ldr	r1, [pc, #140]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e036      	b.n	8002aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4918      	ldr	r1, [pc, #96]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4910      	ldr	r1, [pc, #64]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a7c:	f000 f824 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	490b      	ldr	r1, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ffb1 	bl	8001a08 <HAL_InitTick>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	0800434c 	.word	0x0800434c
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	@ 0x24
 8002acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x34>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d121      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d11e      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002afc:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b08:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e005      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b24:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b40:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e004      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b4c:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d134      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0xac>
 8002b6c:	e005      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b70:	617b      	str	r3, [r7, #20]
      break;
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b76:	617b      	str	r3, [r7, #20]
      break;
 8002b78:	e002      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	fb03 f202 	mul.w	r2, r3, r2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	0e5b      	lsrs	r3, r3, #25
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	@ 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	0800435c 	.word	0x0800435c
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	007a1200 	.word	0x007a1200

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f9ee 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c04:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c0c:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f9de 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c30:	d10b      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	@ 0x80
 8002c36:	d919      	bls.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c3c:	d902      	bls.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e013      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e010      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b80      	cmp	r3, #128	@ 0x80
 8002c4e:	d902      	bls.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c50:	2303      	movs	r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e00a      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	@ 0x80
 8002c5a:	d102      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e004      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b70      	cmp	r3, #112	@ 0x70
 8002c66:	d101      	bne.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	4909      	ldr	r1, [pc, #36]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e095      	b.n	8002dde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cc2:	d009      	beq.n	8002cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	e005      	b.n	8002cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fdc2 	bl	800187c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d18:	d902      	bls.n	8002d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e002      	b.n	8002d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d2e:	d007      	beq.n	8002d40 <HAL_SPI_Init+0xa0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	ea42 0103 	orr.w	r1, r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 0204 	and.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dbc:	ea42 0103 	orr.w	r1, r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_SPI_Transmit+0x22>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e15f      	b.n	80030c8 <HAL_SPI_Transmit+0x2e2>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e10:	f7fe fe4a 	bl	8001aa8 <HAL_GetTick>
 8002e14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e2a:	e148      	b.n	80030be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_SPI_Transmit+0x52>
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e3c:	e13f      	b.n	80030be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2203      	movs	r2, #3
 8002e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e88:	d10f      	bne.n	8002eaa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ea8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b40      	cmp	r3, #64	@ 0x40
 8002eb6:	d007      	beq.n	8002ec8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ed0:	d94f      	bls.n	8002f72 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Transmit+0xfa>
 8002eda:	8afb      	ldrh	r3, [r7, #22]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d142      	bne.n	8002f66 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f04:	e02f      	b.n	8002f66 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d112      	bne.n	8002f3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f38:	e015      	b.n	8002f66 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3a:	f7fe fdb5 	bl	8001aa8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d803      	bhi.n	8002f52 <HAL_SPI_Transmit+0x16c>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d102      	bne.n	8002f58 <HAL_SPI_Transmit+0x172>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f64:	e0ab      	b.n	80030be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ca      	bne.n	8002f06 <HAL_SPI_Transmit+0x120>
 8002f70:	e080      	b.n	8003074 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Transmit+0x19a>
 8002f7a:	8afb      	ldrh	r3, [r7, #22]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d174      	bne.n	800306a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d912      	bls.n	8002fb0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b02      	subs	r3, #2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fae:	e05c      	b.n	800306a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002fd6:	e048      	b.n	800306a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d12b      	bne.n	800303e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d912      	bls.n	8003016 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b02      	subs	r3, #2
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003014:	e029      	b.n	800306a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800303c:	e015      	b.n	800306a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303e:	f7fe fd33 	bl	8001aa8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d803      	bhi.n	8003056 <HAL_SPI_Transmit+0x270>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d102      	bne.n	800305c <HAL_SPI_Transmit+0x276>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003068:	e029      	b.n	80030be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1b1      	bne.n	8002fd8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f947 	bl	800330c <SPI_EndRxTxTransaction>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e003      	b.n	80030be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030e0:	f7fe fce2 	bl	8001aa8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030f0:	f7fe fcda 	bl	8001aa8 <HAL_GetTick>
 80030f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	0d1b      	lsrs	r3, r3, #20
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003106:	e054      	b.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d050      	beq.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003110:	f7fe fcca 	bl	8001aa8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	d902      	bls.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800313e:	d111      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003148:	d004      	beq.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003152:	d107      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316c:	d10f      	bne.n	800318e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800318c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e017      	b.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d19b      	bne.n	8003108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	@ 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031f2:	f7fe fc59 	bl	8001aa8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003202:	f7fe fc51 	bl	8001aa8 <HAL_GetTick>
 8003206:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003210:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00da      	lsls	r2, r3, #3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	0d1b      	lsrs	r3, r3, #20
 8003220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003228:	e060      	b.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003230:	d107      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003240:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d050      	beq.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800324a:	f7fe fc2d 	bl	8001aa8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003256:	429a      	cmp	r2, r3
 8003258:	d902      	bls.n	8003260 <SPI_WaitFifoStateUntilTimeout+0x80>
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13d      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800326e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003278:	d111      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003282:	d004      	beq.n	800328e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328c:	d107      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a6:	d10f      	bne.n	80032c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e010      	b.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d196      	bne.n	800322a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3728      	adds	r7, #40	@ 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff5b 	bl	80031e0 <SPI_WaitFifoStateUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e027      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fec0 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e014      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff34 	bl	80031e0 <SPI_WaitFifoStateUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e000      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <pow>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	ed2d 8b02 	vpush	{d8}
 800339e:	eeb0 8a40 	vmov.f32	s16, s0
 80033a2:	eef0 8a60 	vmov.f32	s17, s1
 80033a6:	ec55 4b11 	vmov	r4, r5, d1
 80033aa:	f000 f979 	bl	80036a0 <__ieee754_pow>
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	ec57 6b10 	vmov	r6, r7, d0
 80033ba:	f7fd fb5f 	bl	8000a7c <__aeabi_dcmpun>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d13b      	bne.n	800343a <pow+0xa2>
 80033c2:	ec51 0b18 	vmov	r0, r1, d8
 80033c6:	2200      	movs	r2, #0
 80033c8:	2300      	movs	r3, #0
 80033ca:	f7fd fb25 	bl	8000a18 <__aeabi_dcmpeq>
 80033ce:	b1b8      	cbz	r0, 8003400 <pow+0x68>
 80033d0:	2200      	movs	r2, #0
 80033d2:	2300      	movs	r3, #0
 80033d4:	4620      	mov	r0, r4
 80033d6:	4629      	mov	r1, r5
 80033d8:	f7fd fb1e 	bl	8000a18 <__aeabi_dcmpeq>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d146      	bne.n	800346e <pow+0xd6>
 80033e0:	ec45 4b10 	vmov	d0, r4, r5
 80033e4:	f000 f874 	bl	80034d0 <finite>
 80033e8:	b338      	cbz	r0, 800343a <pow+0xa2>
 80033ea:	2200      	movs	r2, #0
 80033ec:	2300      	movs	r3, #0
 80033ee:	4620      	mov	r0, r4
 80033f0:	4629      	mov	r1, r5
 80033f2:	f7fd fb1b 	bl	8000a2c <__aeabi_dcmplt>
 80033f6:	b300      	cbz	r0, 800343a <pow+0xa2>
 80033f8:	f000 ff62 	bl	80042c0 <__errno>
 80033fc:	2322      	movs	r3, #34	@ 0x22
 80033fe:	e01b      	b.n	8003438 <pow+0xa0>
 8003400:	ec47 6b10 	vmov	d0, r6, r7
 8003404:	f000 f864 	bl	80034d0 <finite>
 8003408:	b9e0      	cbnz	r0, 8003444 <pow+0xac>
 800340a:	eeb0 0a48 	vmov.f32	s0, s16
 800340e:	eef0 0a68 	vmov.f32	s1, s17
 8003412:	f000 f85d 	bl	80034d0 <finite>
 8003416:	b1a8      	cbz	r0, 8003444 <pow+0xac>
 8003418:	ec45 4b10 	vmov	d0, r4, r5
 800341c:	f000 f858 	bl	80034d0 <finite>
 8003420:	b180      	cbz	r0, 8003444 <pow+0xac>
 8003422:	4632      	mov	r2, r6
 8003424:	463b      	mov	r3, r7
 8003426:	4630      	mov	r0, r6
 8003428:	4639      	mov	r1, r7
 800342a:	f7fd fb27 	bl	8000a7c <__aeabi_dcmpun>
 800342e:	2800      	cmp	r0, #0
 8003430:	d0e2      	beq.n	80033f8 <pow+0x60>
 8003432:	f000 ff45 	bl	80042c0 <__errno>
 8003436:	2321      	movs	r3, #33	@ 0x21
 8003438:	6003      	str	r3, [r0, #0]
 800343a:	ecbd 8b02 	vpop	{d8}
 800343e:	ec47 6b10 	vmov	d0, r6, r7
 8003442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003444:	2200      	movs	r2, #0
 8003446:	2300      	movs	r3, #0
 8003448:	4630      	mov	r0, r6
 800344a:	4639      	mov	r1, r7
 800344c:	f7fd fae4 	bl	8000a18 <__aeabi_dcmpeq>
 8003450:	2800      	cmp	r0, #0
 8003452:	d0f2      	beq.n	800343a <pow+0xa2>
 8003454:	eeb0 0a48 	vmov.f32	s0, s16
 8003458:	eef0 0a68 	vmov.f32	s1, s17
 800345c:	f000 f838 	bl	80034d0 <finite>
 8003460:	2800      	cmp	r0, #0
 8003462:	d0ea      	beq.n	800343a <pow+0xa2>
 8003464:	ec45 4b10 	vmov	d0, r4, r5
 8003468:	f000 f832 	bl	80034d0 <finite>
 800346c:	e7c3      	b.n	80033f6 <pow+0x5e>
 800346e:	4f01      	ldr	r7, [pc, #4]	@ (8003474 <pow+0xdc>)
 8003470:	2600      	movs	r6, #0
 8003472:	e7e2      	b.n	800343a <pow+0xa2>
 8003474:	3ff00000 	.word	0x3ff00000

08003478 <sqrt>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	ed2d 8b02 	vpush	{d8}
 800347e:	ec55 4b10 	vmov	r4, r5, d0
 8003482:	f000 f831 	bl	80034e8 <__ieee754_sqrt>
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	eeb0 8a40 	vmov.f32	s16, s0
 8003492:	eef0 8a60 	vmov.f32	s17, s1
 8003496:	f7fd faf1 	bl	8000a7c <__aeabi_dcmpun>
 800349a:	b990      	cbnz	r0, 80034c2 <sqrt+0x4a>
 800349c:	2200      	movs	r2, #0
 800349e:	2300      	movs	r3, #0
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fd fac2 	bl	8000a2c <__aeabi_dcmplt>
 80034a8:	b158      	cbz	r0, 80034c2 <sqrt+0x4a>
 80034aa:	f000 ff09 	bl	80042c0 <__errno>
 80034ae:	2321      	movs	r3, #33	@ 0x21
 80034b0:	6003      	str	r3, [r0, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	2300      	movs	r3, #0
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7fd f96f 	bl	800079c <__aeabi_ddiv>
 80034be:	ec41 0b18 	vmov	d8, r0, r1
 80034c2:	eeb0 0a48 	vmov.f32	s0, s16
 80034c6:	eef0 0a68 	vmov.f32	s1, s17
 80034ca:	ecbd 8b02 	vpop	{d8}
 80034ce:	bd38      	pop	{r3, r4, r5, pc}

080034d0 <finite>:
 80034d0:	b082      	sub	sp, #8
 80034d2:	ed8d 0b00 	vstr	d0, [sp]
 80034d6:	9801      	ldr	r0, [sp, #4]
 80034d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80034dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80034e0:	0fc0      	lsrs	r0, r0, #31
 80034e2:	b002      	add	sp, #8
 80034e4:	4770      	bx	lr
	...

080034e8 <__ieee754_sqrt>:
 80034e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	4a68      	ldr	r2, [pc, #416]	@ (8003690 <__ieee754_sqrt+0x1a8>)
 80034ee:	ec55 4b10 	vmov	r4, r5, d0
 80034f2:	43aa      	bics	r2, r5
 80034f4:	462b      	mov	r3, r5
 80034f6:	4621      	mov	r1, r4
 80034f8:	d110      	bne.n	800351c <__ieee754_sqrt+0x34>
 80034fa:	4622      	mov	r2, r4
 80034fc:	4620      	mov	r0, r4
 80034fe:	4629      	mov	r1, r5
 8003500:	f7fd f822 	bl	8000548 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7fc fe66 	bl	80001dc <__adddf3>
 8003510:	4604      	mov	r4, r0
 8003512:	460d      	mov	r5, r1
 8003514:	ec45 4b10 	vmov	d0, r4, r5
 8003518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351c:	2d00      	cmp	r5, #0
 800351e:	dc0e      	bgt.n	800353e <__ieee754_sqrt+0x56>
 8003520:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003524:	4322      	orrs	r2, r4
 8003526:	d0f5      	beq.n	8003514 <__ieee754_sqrt+0x2c>
 8003528:	b19d      	cbz	r5, 8003552 <__ieee754_sqrt+0x6a>
 800352a:	4622      	mov	r2, r4
 800352c:	4620      	mov	r0, r4
 800352e:	4629      	mov	r1, r5
 8003530:	f7fc fe52 	bl	80001d8 <__aeabi_dsub>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	f7fd f930 	bl	800079c <__aeabi_ddiv>
 800353c:	e7e8      	b.n	8003510 <__ieee754_sqrt+0x28>
 800353e:	152a      	asrs	r2, r5, #20
 8003540:	d115      	bne.n	800356e <__ieee754_sqrt+0x86>
 8003542:	2000      	movs	r0, #0
 8003544:	e009      	b.n	800355a <__ieee754_sqrt+0x72>
 8003546:	0acb      	lsrs	r3, r1, #11
 8003548:	3a15      	subs	r2, #21
 800354a:	0549      	lsls	r1, r1, #21
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0fa      	beq.n	8003546 <__ieee754_sqrt+0x5e>
 8003550:	e7f7      	b.n	8003542 <__ieee754_sqrt+0x5a>
 8003552:	462a      	mov	r2, r5
 8003554:	e7fa      	b.n	800354c <__ieee754_sqrt+0x64>
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	3001      	adds	r0, #1
 800355a:	02dc      	lsls	r4, r3, #11
 800355c:	d5fb      	bpl.n	8003556 <__ieee754_sqrt+0x6e>
 800355e:	1e44      	subs	r4, r0, #1
 8003560:	1b12      	subs	r2, r2, r4
 8003562:	f1c0 0420 	rsb	r4, r0, #32
 8003566:	fa21 f404 	lsr.w	r4, r1, r4
 800356a:	4323      	orrs	r3, r4
 800356c:	4081      	lsls	r1, r0
 800356e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003572:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800357a:	07d2      	lsls	r2, r2, #31
 800357c:	bf5c      	itt	pl
 800357e:	005b      	lslpl	r3, r3, #1
 8003580:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003584:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003588:	bf58      	it	pl
 800358a:	0049      	lslpl	r1, r1, #1
 800358c:	2600      	movs	r6, #0
 800358e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003592:	106d      	asrs	r5, r5, #1
 8003594:	0049      	lsls	r1, r1, #1
 8003596:	2016      	movs	r0, #22
 8003598:	4632      	mov	r2, r6
 800359a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800359e:	1917      	adds	r7, r2, r4
 80035a0:	429f      	cmp	r7, r3
 80035a2:	bfde      	ittt	le
 80035a4:	193a      	addle	r2, r7, r4
 80035a6:	1bdb      	suble	r3, r3, r7
 80035a8:	1936      	addle	r6, r6, r4
 80035aa:	0fcf      	lsrs	r7, r1, #31
 80035ac:	3801      	subs	r0, #1
 80035ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80035b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80035b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80035ba:	d1f0      	bne.n	800359e <__ieee754_sqrt+0xb6>
 80035bc:	4604      	mov	r4, r0
 80035be:	2720      	movs	r7, #32
 80035c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80035c4:	429a      	cmp	r2, r3
 80035c6:	eb00 0e0c 	add.w	lr, r0, ip
 80035ca:	db02      	blt.n	80035d2 <__ieee754_sqrt+0xea>
 80035cc:	d113      	bne.n	80035f6 <__ieee754_sqrt+0x10e>
 80035ce:	458e      	cmp	lr, r1
 80035d0:	d811      	bhi.n	80035f6 <__ieee754_sqrt+0x10e>
 80035d2:	f1be 0f00 	cmp.w	lr, #0
 80035d6:	eb0e 000c 	add.w	r0, lr, ip
 80035da:	da42      	bge.n	8003662 <__ieee754_sqrt+0x17a>
 80035dc:	2800      	cmp	r0, #0
 80035de:	db40      	blt.n	8003662 <__ieee754_sqrt+0x17a>
 80035e0:	f102 0801 	add.w	r8, r2, #1
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	458e      	cmp	lr, r1
 80035e8:	bf88      	it	hi
 80035ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80035ee:	eba1 010e 	sub.w	r1, r1, lr
 80035f2:	4464      	add	r4, ip
 80035f4:	4642      	mov	r2, r8
 80035f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80035fa:	3f01      	subs	r7, #1
 80035fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003600:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003604:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003608:	d1dc      	bne.n	80035c4 <__ieee754_sqrt+0xdc>
 800360a:	4319      	orrs	r1, r3
 800360c:	d01b      	beq.n	8003646 <__ieee754_sqrt+0x15e>
 800360e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003694 <__ieee754_sqrt+0x1ac>
 8003612:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003698 <__ieee754_sqrt+0x1b0>
 8003616:	e9da 0100 	ldrd	r0, r1, [sl]
 800361a:	e9db 2300 	ldrd	r2, r3, [fp]
 800361e:	f7fc fddb 	bl	80001d8 <__aeabi_dsub>
 8003622:	e9da 8900 	ldrd	r8, r9, [sl]
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4640      	mov	r0, r8
 800362c:	4649      	mov	r1, r9
 800362e:	f7fd fa07 	bl	8000a40 <__aeabi_dcmple>
 8003632:	b140      	cbz	r0, 8003646 <__ieee754_sqrt+0x15e>
 8003634:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003638:	e9da 0100 	ldrd	r0, r1, [sl]
 800363c:	e9db 2300 	ldrd	r2, r3, [fp]
 8003640:	d111      	bne.n	8003666 <__ieee754_sqrt+0x17e>
 8003642:	3601      	adds	r6, #1
 8003644:	463c      	mov	r4, r7
 8003646:	1072      	asrs	r2, r6, #1
 8003648:	0863      	lsrs	r3, r4, #1
 800364a:	07f1      	lsls	r1, r6, #31
 800364c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003650:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003654:	bf48      	it	mi
 8003656:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800365a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800365e:	4618      	mov	r0, r3
 8003660:	e756      	b.n	8003510 <__ieee754_sqrt+0x28>
 8003662:	4690      	mov	r8, r2
 8003664:	e7be      	b.n	80035e4 <__ieee754_sqrt+0xfc>
 8003666:	f7fc fdb9 	bl	80001dc <__adddf3>
 800366a:	e9da 8900 	ldrd	r8, r9, [sl]
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4640      	mov	r0, r8
 8003674:	4649      	mov	r1, r9
 8003676:	f7fd f9d9 	bl	8000a2c <__aeabi_dcmplt>
 800367a:	b120      	cbz	r0, 8003686 <__ieee754_sqrt+0x19e>
 800367c:	1ca0      	adds	r0, r4, #2
 800367e:	bf08      	it	eq
 8003680:	3601      	addeq	r6, #1
 8003682:	3402      	adds	r4, #2
 8003684:	e7df      	b.n	8003646 <__ieee754_sqrt+0x15e>
 8003686:	1c63      	adds	r3, r4, #1
 8003688:	f023 0401 	bic.w	r4, r3, #1
 800368c:	e7db      	b.n	8003646 <__ieee754_sqrt+0x15e>
 800368e:	bf00      	nop
 8003690:	7ff00000 	.word	0x7ff00000
 8003694:	20000018 	.word	0x20000018
 8003698:	20000010 	.word	0x20000010
 800369c:	00000000 	.word	0x00000000

080036a0 <__ieee754_pow>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	b091      	sub	sp, #68	@ 0x44
 80036a6:	ed8d 1b00 	vstr	d1, [sp]
 80036aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80036ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80036b2:	ea5a 0001 	orrs.w	r0, sl, r1
 80036b6:	ec57 6b10 	vmov	r6, r7, d0
 80036ba:	d113      	bne.n	80036e4 <__ieee754_pow+0x44>
 80036bc:	19b3      	adds	r3, r6, r6
 80036be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80036c2:	4152      	adcs	r2, r2
 80036c4:	4298      	cmp	r0, r3
 80036c6:	4b98      	ldr	r3, [pc, #608]	@ (8003928 <__ieee754_pow+0x288>)
 80036c8:	4193      	sbcs	r3, r2
 80036ca:	f080 84ea 	bcs.w	80040a2 <__ieee754_pow+0xa02>
 80036ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036d2:	4630      	mov	r0, r6
 80036d4:	4639      	mov	r1, r7
 80036d6:	f7fc fd81 	bl	80001dc <__adddf3>
 80036da:	ec41 0b10 	vmov	d0, r0, r1
 80036de:	b011      	add	sp, #68	@ 0x44
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	4a91      	ldr	r2, [pc, #580]	@ (800392c <__ieee754_pow+0x28c>)
 80036e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80036ea:	4590      	cmp	r8, r2
 80036ec:	463d      	mov	r5, r7
 80036ee:	4633      	mov	r3, r6
 80036f0:	d806      	bhi.n	8003700 <__ieee754_pow+0x60>
 80036f2:	d101      	bne.n	80036f8 <__ieee754_pow+0x58>
 80036f4:	2e00      	cmp	r6, #0
 80036f6:	d1ea      	bne.n	80036ce <__ieee754_pow+0x2e>
 80036f8:	4592      	cmp	sl, r2
 80036fa:	d801      	bhi.n	8003700 <__ieee754_pow+0x60>
 80036fc:	d10e      	bne.n	800371c <__ieee754_pow+0x7c>
 80036fe:	b169      	cbz	r1, 800371c <__ieee754_pow+0x7c>
 8003700:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003704:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003708:	431d      	orrs	r5, r3
 800370a:	d1e0      	bne.n	80036ce <__ieee754_pow+0x2e>
 800370c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003710:	18db      	adds	r3, r3, r3
 8003712:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003716:	4152      	adcs	r2, r2
 8003718:	429d      	cmp	r5, r3
 800371a:	e7d4      	b.n	80036c6 <__ieee754_pow+0x26>
 800371c:	2d00      	cmp	r5, #0
 800371e:	46c3      	mov	fp, r8
 8003720:	da3a      	bge.n	8003798 <__ieee754_pow+0xf8>
 8003722:	4a83      	ldr	r2, [pc, #524]	@ (8003930 <__ieee754_pow+0x290>)
 8003724:	4592      	cmp	sl, r2
 8003726:	d84d      	bhi.n	80037c4 <__ieee754_pow+0x124>
 8003728:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800372c:	4592      	cmp	sl, r2
 800372e:	f240 84c7 	bls.w	80040c0 <__ieee754_pow+0xa20>
 8003732:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003736:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800373a:	2a14      	cmp	r2, #20
 800373c:	dd0f      	ble.n	800375e <__ieee754_pow+0xbe>
 800373e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003742:	fa21 f402 	lsr.w	r4, r1, r2
 8003746:	fa04 f202 	lsl.w	r2, r4, r2
 800374a:	428a      	cmp	r2, r1
 800374c:	f040 84b8 	bne.w	80040c0 <__ieee754_pow+0xa20>
 8003750:	f004 0401 	and.w	r4, r4, #1
 8003754:	f1c4 0402 	rsb	r4, r4, #2
 8003758:	2900      	cmp	r1, #0
 800375a:	d158      	bne.n	800380e <__ieee754_pow+0x16e>
 800375c:	e00e      	b.n	800377c <__ieee754_pow+0xdc>
 800375e:	2900      	cmp	r1, #0
 8003760:	d154      	bne.n	800380c <__ieee754_pow+0x16c>
 8003762:	f1c2 0214 	rsb	r2, r2, #20
 8003766:	fa4a f402 	asr.w	r4, sl, r2
 800376a:	fa04 f202 	lsl.w	r2, r4, r2
 800376e:	4552      	cmp	r2, sl
 8003770:	f040 84a3 	bne.w	80040ba <__ieee754_pow+0xa1a>
 8003774:	f004 0401 	and.w	r4, r4, #1
 8003778:	f1c4 0402 	rsb	r4, r4, #2
 800377c:	4a6d      	ldr	r2, [pc, #436]	@ (8003934 <__ieee754_pow+0x294>)
 800377e:	4592      	cmp	sl, r2
 8003780:	d12e      	bne.n	80037e0 <__ieee754_pow+0x140>
 8003782:	f1b9 0f00 	cmp.w	r9, #0
 8003786:	f280 8494 	bge.w	80040b2 <__ieee754_pow+0xa12>
 800378a:	496a      	ldr	r1, [pc, #424]	@ (8003934 <__ieee754_pow+0x294>)
 800378c:	4632      	mov	r2, r6
 800378e:	463b      	mov	r3, r7
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd f803 	bl	800079c <__aeabi_ddiv>
 8003796:	e7a0      	b.n	80036da <__ieee754_pow+0x3a>
 8003798:	2400      	movs	r4, #0
 800379a:	bbc1      	cbnz	r1, 800380e <__ieee754_pow+0x16e>
 800379c:	4a63      	ldr	r2, [pc, #396]	@ (800392c <__ieee754_pow+0x28c>)
 800379e:	4592      	cmp	sl, r2
 80037a0:	d1ec      	bne.n	800377c <__ieee754_pow+0xdc>
 80037a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80037a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80037aa:	431a      	orrs	r2, r3
 80037ac:	f000 8479 	beq.w	80040a2 <__ieee754_pow+0xa02>
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <__ieee754_pow+0x298>)
 80037b2:	4598      	cmp	r8, r3
 80037b4:	d908      	bls.n	80037c8 <__ieee754_pow+0x128>
 80037b6:	f1b9 0f00 	cmp.w	r9, #0
 80037ba:	f2c0 8476 	blt.w	80040aa <__ieee754_pow+0xa0a>
 80037be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037c2:	e78a      	b.n	80036da <__ieee754_pow+0x3a>
 80037c4:	2402      	movs	r4, #2
 80037c6:	e7e8      	b.n	800379a <__ieee754_pow+0xfa>
 80037c8:	f1b9 0f00 	cmp.w	r9, #0
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	da81      	bge.n	80036da <__ieee754_pow+0x3a>
 80037d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80037da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80037de:	e77c      	b.n	80036da <__ieee754_pow+0x3a>
 80037e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80037e4:	d106      	bne.n	80037f4 <__ieee754_pow+0x154>
 80037e6:	4632      	mov	r2, r6
 80037e8:	463b      	mov	r3, r7
 80037ea:	4630      	mov	r0, r6
 80037ec:	4639      	mov	r1, r7
 80037ee:	f7fc feab 	bl	8000548 <__aeabi_dmul>
 80037f2:	e772      	b.n	80036da <__ieee754_pow+0x3a>
 80037f4:	4a51      	ldr	r2, [pc, #324]	@ (800393c <__ieee754_pow+0x29c>)
 80037f6:	4591      	cmp	r9, r2
 80037f8:	d109      	bne.n	800380e <__ieee754_pow+0x16e>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	db07      	blt.n	800380e <__ieee754_pow+0x16e>
 80037fe:	ec47 6b10 	vmov	d0, r6, r7
 8003802:	b011      	add	sp, #68	@ 0x44
 8003804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	f7ff be6e 	b.w	80034e8 <__ieee754_sqrt>
 800380c:	2400      	movs	r4, #0
 800380e:	ec47 6b10 	vmov	d0, r6, r7
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	f000 fc88 	bl	8004128 <fabs>
 8003818:	9b02      	ldr	r3, [sp, #8]
 800381a:	ec51 0b10 	vmov	r0, r1, d0
 800381e:	bb53      	cbnz	r3, 8003876 <__ieee754_pow+0x1d6>
 8003820:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <__ieee754_pow+0x294>)
 8003822:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003826:	429a      	cmp	r2, r3
 8003828:	d002      	beq.n	8003830 <__ieee754_pow+0x190>
 800382a:	f1b8 0f00 	cmp.w	r8, #0
 800382e:	d122      	bne.n	8003876 <__ieee754_pow+0x1d6>
 8003830:	f1b9 0f00 	cmp.w	r9, #0
 8003834:	da05      	bge.n	8003842 <__ieee754_pow+0x1a2>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	2000      	movs	r0, #0
 800383c:	493d      	ldr	r1, [pc, #244]	@ (8003934 <__ieee754_pow+0x294>)
 800383e:	f7fc ffad 	bl	800079c <__aeabi_ddiv>
 8003842:	2d00      	cmp	r5, #0
 8003844:	f6bf af49 	bge.w	80036da <__ieee754_pow+0x3a>
 8003848:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800384c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003850:	ea58 0804 	orrs.w	r8, r8, r4
 8003854:	d108      	bne.n	8003868 <__ieee754_pow+0x1c8>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	f7fc fcbb 	bl	80001d8 <__aeabi_dsub>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	e794      	b.n	8003792 <__ieee754_pow+0xf2>
 8003868:	2c01      	cmp	r4, #1
 800386a:	f47f af36 	bne.w	80036da <__ieee754_pow+0x3a>
 800386e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003872:	4619      	mov	r1, r3
 8003874:	e731      	b.n	80036da <__ieee754_pow+0x3a>
 8003876:	0feb      	lsrs	r3, r5, #31
 8003878:	3b01      	subs	r3, #1
 800387a:	ea53 0204 	orrs.w	r2, r3, r4
 800387e:	d102      	bne.n	8003886 <__ieee754_pow+0x1e6>
 8003880:	4632      	mov	r2, r6
 8003882:	463b      	mov	r3, r7
 8003884:	e7e9      	b.n	800385a <__ieee754_pow+0x1ba>
 8003886:	3c01      	subs	r4, #1
 8003888:	431c      	orrs	r4, r3
 800388a:	d016      	beq.n	80038ba <__ieee754_pow+0x21a>
 800388c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003918 <__ieee754_pow+0x278>
 8003890:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003894:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003898:	f240 8112 	bls.w	8003ac0 <__ieee754_pow+0x420>
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <__ieee754_pow+0x2a0>)
 800389e:	459a      	cmp	sl, r3
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <__ieee754_pow+0x298>)
 80038a2:	d916      	bls.n	80038d2 <__ieee754_pow+0x232>
 80038a4:	4598      	cmp	r8, r3
 80038a6:	d80b      	bhi.n	80038c0 <__ieee754_pow+0x220>
 80038a8:	f1b9 0f00 	cmp.w	r9, #0
 80038ac:	da0b      	bge.n	80038c6 <__ieee754_pow+0x226>
 80038ae:	2000      	movs	r0, #0
 80038b0:	b011      	add	sp, #68	@ 0x44
 80038b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f000 bcf3 	b.w	80042a0 <__math_oflow>
 80038ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003920 <__ieee754_pow+0x280>
 80038be:	e7e7      	b.n	8003890 <__ieee754_pow+0x1f0>
 80038c0:	f1b9 0f00 	cmp.w	r9, #0
 80038c4:	dcf3      	bgt.n	80038ae <__ieee754_pow+0x20e>
 80038c6:	2000      	movs	r0, #0
 80038c8:	b011      	add	sp, #68	@ 0x44
 80038ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ce:	f000 bcdf 	b.w	8004290 <__math_uflow>
 80038d2:	4598      	cmp	r8, r3
 80038d4:	d20c      	bcs.n	80038f0 <__ieee754_pow+0x250>
 80038d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	2300      	movs	r3, #0
 80038de:	f7fd f8a5 	bl	8000a2c <__aeabi_dcmplt>
 80038e2:	3800      	subs	r0, #0
 80038e4:	bf18      	it	ne
 80038e6:	2001      	movne	r0, #1
 80038e8:	f1b9 0f00 	cmp.w	r9, #0
 80038ec:	daec      	bge.n	80038c8 <__ieee754_pow+0x228>
 80038ee:	e7df      	b.n	80038b0 <__ieee754_pow+0x210>
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <__ieee754_pow+0x294>)
 80038f2:	4598      	cmp	r8, r3
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	d924      	bls.n	8003944 <__ieee754_pow+0x2a4>
 80038fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038fe:	2300      	movs	r3, #0
 8003900:	f7fd f894 	bl	8000a2c <__aeabi_dcmplt>
 8003904:	3800      	subs	r0, #0
 8003906:	bf18      	it	ne
 8003908:	2001      	movne	r0, #1
 800390a:	f1b9 0f00 	cmp.w	r9, #0
 800390e:	dccf      	bgt.n	80038b0 <__ieee754_pow+0x210>
 8003910:	e7da      	b.n	80038c8 <__ieee754_pow+0x228>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	00000000 	.word	0x00000000
 800391c:	3ff00000 	.word	0x3ff00000
 8003920:	00000000 	.word	0x00000000
 8003924:	bff00000 	.word	0xbff00000
 8003928:	fff00000 	.word	0xfff00000
 800392c:	7ff00000 	.word	0x7ff00000
 8003930:	433fffff 	.word	0x433fffff
 8003934:	3ff00000 	.word	0x3ff00000
 8003938:	3fefffff 	.word	0x3fefffff
 800393c:	3fe00000 	.word	0x3fe00000
 8003940:	43f00000 	.word	0x43f00000
 8003944:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <__ieee754_pow+0x410>)
 8003946:	f7fc fc47 	bl	80001d8 <__aeabi_dsub>
 800394a:	a351      	add	r3, pc, #324	@ (adr r3, 8003a90 <__ieee754_pow+0x3f0>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	4604      	mov	r4, r0
 8003952:	460d      	mov	r5, r1
 8003954:	f7fc fdf8 	bl	8000548 <__aeabi_dmul>
 8003958:	a34f      	add	r3, pc, #316	@ (adr r3, 8003a98 <__ieee754_pow+0x3f8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	4606      	mov	r6, r0
 8003960:	460f      	mov	r7, r1
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	f7fc fdef 	bl	8000548 <__aeabi_dmul>
 800396a:	4b52      	ldr	r3, [pc, #328]	@ (8003ab4 <__ieee754_pow+0x414>)
 800396c:	4682      	mov	sl, r0
 800396e:	468b      	mov	fp, r1
 8003970:	2200      	movs	r2, #0
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fde7 	bl	8000548 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	a148      	add	r1, pc, #288	@ (adr r1, 8003aa0 <__ieee754_pow+0x400>)
 8003980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003984:	f7fc fc28 	bl	80001d8 <__aeabi_dsub>
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	f7fc fddc 	bl	8000548 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	2000      	movs	r0, #0
 8003996:	4948      	ldr	r1, [pc, #288]	@ (8003ab8 <__ieee754_pow+0x418>)
 8003998:	f7fc fc1e 	bl	80001d8 <__aeabi_dsub>
 800399c:	4622      	mov	r2, r4
 800399e:	4680      	mov	r8, r0
 80039a0:	4689      	mov	r9, r1
 80039a2:	462b      	mov	r3, r5
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fdce 	bl	8000548 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	f7fc fdc8 	bl	8000548 <__aeabi_dmul>
 80039b8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003aa8 <__ieee754_pow+0x408>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fdc3 	bl	8000548 <__aeabi_dmul>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4650      	mov	r0, sl
 80039c8:	4659      	mov	r1, fp
 80039ca:	f7fc fc05 	bl	80001d8 <__aeabi_dsub>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4680      	mov	r8, r0
 80039d4:	4689      	mov	r9, r1
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	f7fc fbff 	bl	80001dc <__adddf3>
 80039de:	2400      	movs	r4, #0
 80039e0:	4632      	mov	r2, r6
 80039e2:	463b      	mov	r3, r7
 80039e4:	4620      	mov	r0, r4
 80039e6:	460d      	mov	r5, r1
 80039e8:	f7fc fbf6 	bl	80001d8 <__aeabi_dsub>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4640      	mov	r0, r8
 80039f2:	4649      	mov	r1, r9
 80039f4:	f7fc fbf0 	bl	80001d8 <__aeabi_dsub>
 80039f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003a08:	4606      	mov	r6, r0
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	4652      	mov	r2, sl
 8003a0e:	465b      	mov	r3, fp
 8003a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a14:	f7fc fbe0 	bl	80001d8 <__aeabi_dsub>
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	f7fc fd94 	bl	8000548 <__aeabi_dmul>
 8003a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a24:	4680      	mov	r8, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	4630      	mov	r0, r6
 8003a2a:	4639      	mov	r1, r7
 8003a2c:	f7fc fd8c 	bl	8000548 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4640      	mov	r0, r8
 8003a36:	4649      	mov	r1, r9
 8003a38:	f7fc fbd0 	bl	80001dc <__adddf3>
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	465b      	mov	r3, fp
 8003a40:	4606      	mov	r6, r0
 8003a42:	460f      	mov	r7, r1
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	f7fc fd7e 	bl	8000548 <__aeabi_dmul>
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4680      	mov	r8, r0
 8003a52:	4689      	mov	r9, r1
 8003a54:	4630      	mov	r0, r6
 8003a56:	4639      	mov	r1, r7
 8003a58:	f7fc fbc0 	bl	80001dc <__adddf3>
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <__ieee754_pow+0x41c>)
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	468a      	mov	sl, r1
 8003a66:	468b      	mov	fp, r1
 8003a68:	f340 82ef 	ble.w	800404a <__ieee754_pow+0x9aa>
 8003a6c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003a70:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003a74:	4303      	orrs	r3, r0
 8003a76:	f000 81e8 	beq.w	8003e4a <__ieee754_pow+0x7aa>
 8003a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	f7fc ffd3 	bl	8000a2c <__aeabi_dcmplt>
 8003a86:	3800      	subs	r0, #0
 8003a88:	bf18      	it	ne
 8003a8a:	2001      	movne	r0, #1
 8003a8c:	e710      	b.n	80038b0 <__ieee754_pow+0x210>
 8003a8e:	bf00      	nop
 8003a90:	60000000 	.word	0x60000000
 8003a94:	3ff71547 	.word	0x3ff71547
 8003a98:	f85ddf44 	.word	0xf85ddf44
 8003a9c:	3e54ae0b 	.word	0x3e54ae0b
 8003aa0:	55555555 	.word	0x55555555
 8003aa4:	3fd55555 	.word	0x3fd55555
 8003aa8:	652b82fe 	.word	0x652b82fe
 8003aac:	3ff71547 	.word	0x3ff71547
 8003ab0:	3ff00000 	.word	0x3ff00000
 8003ab4:	3fd00000 	.word	0x3fd00000
 8003ab8:	3fe00000 	.word	0x3fe00000
 8003abc:	408fffff 	.word	0x408fffff
 8003ac0:	4bd5      	ldr	r3, [pc, #852]	@ (8003e18 <__ieee754_pow+0x778>)
 8003ac2:	402b      	ands	r3, r5
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	b92b      	cbnz	r3, 8003ad4 <__ieee754_pow+0x434>
 8003ac8:	4bd4      	ldr	r3, [pc, #848]	@ (8003e1c <__ieee754_pow+0x77c>)
 8003aca:	f7fc fd3d 	bl	8000548 <__aeabi_dmul>
 8003ace:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003ad2:	468b      	mov	fp, r1
 8003ad4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003ad8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003adc:	4413      	add	r3, r2
 8003ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ae0:	4bcf      	ldr	r3, [pc, #828]	@ (8003e20 <__ieee754_pow+0x780>)
 8003ae2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003ae6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003aea:	459b      	cmp	fp, r3
 8003aec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003af0:	dd08      	ble.n	8003b04 <__ieee754_pow+0x464>
 8003af2:	4bcc      	ldr	r3, [pc, #816]	@ (8003e24 <__ieee754_pow+0x784>)
 8003af4:	459b      	cmp	fp, r3
 8003af6:	f340 81a5 	ble.w	8003e44 <__ieee754_pow+0x7a4>
 8003afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003afc:	3301      	adds	r3, #1
 8003afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b00:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003b04:	f04f 0a00 	mov.w	sl, #0
 8003b08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b0e:	4bc6      	ldr	r3, [pc, #792]	@ (8003e28 <__ieee754_pow+0x788>)
 8003b10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b14:	ed93 7b00 	vldr	d7, [r3]
 8003b18:	4629      	mov	r1, r5
 8003b1a:	ec53 2b17 	vmov	r2, r3, d7
 8003b1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b26:	f7fc fb57 	bl	80001d8 <__aeabi_dsub>
 8003b2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b2e:	4606      	mov	r6, r0
 8003b30:	460f      	mov	r7, r1
 8003b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b36:	f7fc fb51 	bl	80001dc <__adddf3>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	2000      	movs	r0, #0
 8003b40:	49ba      	ldr	r1, [pc, #744]	@ (8003e2c <__ieee754_pow+0x78c>)
 8003b42:	f7fc fe2b 	bl	800079c <__aeabi_ddiv>
 8003b46:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4630      	mov	r0, r6
 8003b50:	4639      	mov	r1, r7
 8003b52:	f7fc fcf9 	bl	8000548 <__aeabi_dmul>
 8003b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b5a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003b5e:	106d      	asrs	r5, r5, #1
 8003b60:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003b64:	f04f 0b00 	mov.w	fp, #0
 8003b68:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003b6c:	4661      	mov	r1, ip
 8003b6e:	2200      	movs	r2, #0
 8003b70:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003b74:	4658      	mov	r0, fp
 8003b76:	46e1      	mov	r9, ip
 8003b78:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f7fc fce2 	bl	8000548 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc fb24 	bl	80001d8 <__aeabi_dsub>
 8003b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b94:	4606      	mov	r6, r0
 8003b96:	460f      	mov	r7, r1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7fc fb1c 	bl	80001d8 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ba8:	f7fc fb16 	bl	80001d8 <__aeabi_dsub>
 8003bac:	465a      	mov	r2, fp
 8003bae:	464b      	mov	r3, r9
 8003bb0:	f7fc fcca 	bl	8000548 <__aeabi_dmul>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4630      	mov	r0, r6
 8003bba:	4639      	mov	r1, r7
 8003bbc:	f7fc fb0c 	bl	80001d8 <__aeabi_dsub>
 8003bc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003bc4:	f7fc fcc0 	bl	8000548 <__aeabi_dmul>
 8003bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc fcb8 	bl	8000548 <__aeabi_dmul>
 8003bd8:	a37d      	add	r3, pc, #500	@ (adr r3, 8003dd0 <__ieee754_pow+0x730>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
 8003be2:	f7fc fcb1 	bl	8000548 <__aeabi_dmul>
 8003be6:	a37c      	add	r3, pc, #496	@ (adr r3, 8003dd8 <__ieee754_pow+0x738>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc faf6 	bl	80001dc <__adddf3>
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	f7fc fca8 	bl	8000548 <__aeabi_dmul>
 8003bf8:	a379      	add	r3, pc, #484	@ (adr r3, 8003de0 <__ieee754_pow+0x740>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc faed 	bl	80001dc <__adddf3>
 8003c02:	4622      	mov	r2, r4
 8003c04:	462b      	mov	r3, r5
 8003c06:	f7fc fc9f 	bl	8000548 <__aeabi_dmul>
 8003c0a:	a377      	add	r3, pc, #476	@ (adr r3, 8003de8 <__ieee754_pow+0x748>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f7fc fae4 	bl	80001dc <__adddf3>
 8003c14:	4622      	mov	r2, r4
 8003c16:	462b      	mov	r3, r5
 8003c18:	f7fc fc96 	bl	8000548 <__aeabi_dmul>
 8003c1c:	a374      	add	r3, pc, #464	@ (adr r3, 8003df0 <__ieee754_pow+0x750>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc fadb 	bl	80001dc <__adddf3>
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f7fc fc8d 	bl	8000548 <__aeabi_dmul>
 8003c2e:	a372      	add	r3, pc, #456	@ (adr r3, 8003df8 <__ieee754_pow+0x758>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fad2 	bl	80001dc <__adddf3>
 8003c38:	4622      	mov	r2, r4
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	462b      	mov	r3, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fc80 	bl	8000548 <__aeabi_dmul>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f7fc fc7a 	bl	8000548 <__aeabi_dmul>
 8003c54:	465a      	mov	r2, fp
 8003c56:	4604      	mov	r4, r0
 8003c58:	460d      	mov	r5, r1
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c60:	f7fc fabc 	bl	80001dc <__adddf3>
 8003c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c68:	f7fc fc6e 	bl	8000548 <__aeabi_dmul>
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f7fc fab4 	bl	80001dc <__adddf3>
 8003c74:	465a      	mov	r2, fp
 8003c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4658      	mov	r0, fp
 8003c7e:	4649      	mov	r1, r9
 8003c80:	f7fc fc62 	bl	8000548 <__aeabi_dmul>
 8003c84:	4b6a      	ldr	r3, [pc, #424]	@ (8003e30 <__ieee754_pow+0x790>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	f7fc faa6 	bl	80001dc <__adddf3>
 8003c90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c94:	f7fc faa2 	bl	80001dc <__adddf3>
 8003c98:	46d8      	mov	r8, fp
 8003c9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003c9e:	460d      	mov	r5, r1
 8003ca0:	465a      	mov	r2, fp
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003cac:	f7fc fc4c 	bl	8000548 <__aeabi_dmul>
 8003cb0:	465c      	mov	r4, fp
 8003cb2:	4680      	mov	r8, r0
 8003cb4:	4689      	mov	r9, r1
 8003cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e30 <__ieee754_pow+0x790>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fa8b 	bl	80001d8 <__aeabi_dsub>
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	f7fc fa87 	bl	80001d8 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003cd2:	f7fc fa81 	bl	80001d8 <__aeabi_dsub>
 8003cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cda:	f7fc fc35 	bl	8000548 <__aeabi_dmul>
 8003cde:	4622      	mov	r2, r4
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	460f      	mov	r7, r1
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cea:	f7fc fc2d 	bl	8000548 <__aeabi_dmul>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	f7fc fa71 	bl	80001dc <__adddf3>
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460f      	mov	r7, r1
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f7fc fa69 	bl	80001dc <__adddf3>
 8003d0a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003d0e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003e00 <__ieee754_pow+0x760>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4658      	mov	r0, fp
 8003d16:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	f7fc fc14 	bl	8000548 <__aeabi_dmul>
 8003d20:	465c      	mov	r4, fp
 8003d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d26:	4642      	mov	r2, r8
 8003d28:	464b      	mov	r3, r9
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fa53 	bl	80001d8 <__aeabi_dsub>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4630      	mov	r0, r6
 8003d38:	4639      	mov	r1, r7
 8003d3a:	f7fc fa4d 	bl	80001d8 <__aeabi_dsub>
 8003d3e:	a332      	add	r3, pc, #200	@ (adr r3, 8003e08 <__ieee754_pow+0x768>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fc00 	bl	8000548 <__aeabi_dmul>
 8003d48:	a331      	add	r3, pc, #196	@ (adr r3, 8003e10 <__ieee754_pow+0x770>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	4606      	mov	r6, r0
 8003d50:	460f      	mov	r7, r1
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7fc fbf7 	bl	8000548 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fa3b 	bl	80001dc <__adddf3>
 8003d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d68:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <__ieee754_pow+0x794>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa34 	bl	80001dc <__adddf3>
 8003d74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003d7a:	f7fc fb7b 	bl	8000474 <__aeabi_i2d>
 8003d7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <__ieee754_pow+0x798>)
 8003d82:	4413      	add	r3, r2
 8003d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d88:	4606      	mov	r6, r0
 8003d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d8e:	460f      	mov	r7, r1
 8003d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d94:	f7fc fa22 	bl	80001dc <__adddf3>
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	f7fc fa1e 	bl	80001dc <__adddf3>
 8003da0:	4632      	mov	r2, r6
 8003da2:	463b      	mov	r3, r7
 8003da4:	f7fc fa1a 	bl	80001dc <__adddf3>
 8003da8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8003dac:	4632      	mov	r2, r6
 8003dae:	463b      	mov	r3, r7
 8003db0:	4658      	mov	r0, fp
 8003db2:	460d      	mov	r5, r1
 8003db4:	f7fc fa10 	bl	80001d8 <__aeabi_dsub>
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	f7fc fa0c 	bl	80001d8 <__aeabi_dsub>
 8003dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dc4:	f7fc fa08 	bl	80001d8 <__aeabi_dsub>
 8003dc8:	465c      	mov	r4, fp
 8003dca:	4602      	mov	r2, r0
 8003dcc:	e036      	b.n	8003e3c <__ieee754_pow+0x79c>
 8003dce:	bf00      	nop
 8003dd0:	4a454eef 	.word	0x4a454eef
 8003dd4:	3fca7e28 	.word	0x3fca7e28
 8003dd8:	93c9db65 	.word	0x93c9db65
 8003ddc:	3fcd864a 	.word	0x3fcd864a
 8003de0:	a91d4101 	.word	0xa91d4101
 8003de4:	3fd17460 	.word	0x3fd17460
 8003de8:	518f264d 	.word	0x518f264d
 8003dec:	3fd55555 	.word	0x3fd55555
 8003df0:	db6fabff 	.word	0xdb6fabff
 8003df4:	3fdb6db6 	.word	0x3fdb6db6
 8003df8:	33333303 	.word	0x33333303
 8003dfc:	3fe33333 	.word	0x3fe33333
 8003e00:	e0000000 	.word	0xe0000000
 8003e04:	3feec709 	.word	0x3feec709
 8003e08:	dc3a03fd 	.word	0xdc3a03fd
 8003e0c:	3feec709 	.word	0x3feec709
 8003e10:	145b01f5 	.word	0x145b01f5
 8003e14:	be3e2fe0 	.word	0xbe3e2fe0
 8003e18:	7ff00000 	.word	0x7ff00000
 8003e1c:	43400000 	.word	0x43400000
 8003e20:	0003988e 	.word	0x0003988e
 8003e24:	000bb679 	.word	0x000bb679
 8003e28:	080043b0 	.word	0x080043b0
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	40080000 	.word	0x40080000
 8003e34:	08004390 	.word	0x08004390
 8003e38:	080043a0 	.word	0x080043a0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e42:	e5d7      	b.n	80039f4 <__ieee754_pow+0x354>
 8003e44:	f04f 0a01 	mov.w	sl, #1
 8003e48:	e65e      	b.n	8003b08 <__ieee754_pow+0x468>
 8003e4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800411c <__ieee754_pow+0xa7c>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc f9c2 	bl	80001dc <__adddf3>
 8003e58:	4642      	mov	r2, r8
 8003e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8003e5e:	464b      	mov	r3, r9
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc f9b8 	bl	80001d8 <__aeabi_dsub>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e70:	f7fc fdfa 	bl	8000a68 <__aeabi_dcmpgt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f47f ae00 	bne.w	8003a7a <__ieee754_pow+0x3da>
 8003e7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003e7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e82:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8003e86:	fa43 fa0a 	asr.w	sl, r3, sl
 8003e8a:	44da      	add	sl, fp
 8003e8c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003e90:	489d      	ldr	r0, [pc, #628]	@ (8004108 <__ieee754_pow+0xa68>)
 8003e92:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003e96:	4108      	asrs	r0, r1
 8003e98:	ea00 030a 	and.w	r3, r0, sl
 8003e9c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003ea0:	f1c1 0114 	rsb	r1, r1, #20
 8003ea4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8003ea8:	fa4a fa01 	asr.w	sl, sl, r1
 8003eac:	f1bb 0f00 	cmp.w	fp, #0
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	bfb8      	it	lt
 8003eba:	f1ca 0a00 	rsblt	sl, sl, #0
 8003ebe:	f7fc f98b 	bl	80001d8 <__aeabi_dsub>
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	463b      	mov	r3, r7
 8003eca:	4640      	mov	r0, r8
 8003ecc:	4649      	mov	r1, r9
 8003ece:	f7fc f985 	bl	80001dc <__adddf3>
 8003ed2:	2400      	movs	r4, #0
 8003ed4:	a37c      	add	r3, pc, #496	@ (adr r3, 80040c8 <__ieee754_pow+0xa28>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	4620      	mov	r0, r4
 8003edc:	460d      	mov	r5, r1
 8003ede:	f7fc fb33 	bl	8000548 <__aeabi_dmul>
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee8:	464b      	mov	r3, r9
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc f973 	bl	80001d8 <__aeabi_dsub>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	4639      	mov	r1, r7
 8003efa:	f7fc f96d 	bl	80001d8 <__aeabi_dsub>
 8003efe:	a374      	add	r3, pc, #464	@ (adr r3, 80040d0 <__ieee754_pow+0xa30>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc fb20 	bl	8000548 <__aeabi_dmul>
 8003f08:	a373      	add	r3, pc, #460	@ (adr r3, 80040d8 <__ieee754_pow+0xa38>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	4680      	mov	r8, r0
 8003f10:	4689      	mov	r9, r1
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc fb17 	bl	8000548 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc f95b 	bl	80001dc <__adddf3>
 8003f26:	4604      	mov	r4, r0
 8003f28:	460d      	mov	r5, r1
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f32:	f7fc f953 	bl	80001dc <__adddf3>
 8003f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	4689      	mov	r9, r1
 8003f3e:	f7fc f94b 	bl	80001d8 <__aeabi_dsub>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7fc f945 	bl	80001d8 <__aeabi_dsub>
 8003f4e:	4642      	mov	r2, r8
 8003f50:	4606      	mov	r6, r0
 8003f52:	460f      	mov	r7, r1
 8003f54:	464b      	mov	r3, r9
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	f7fc faf5 	bl	8000548 <__aeabi_dmul>
 8003f5e:	a360      	add	r3, pc, #384	@ (adr r3, 80040e0 <__ieee754_pow+0xa40>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	4604      	mov	r4, r0
 8003f66:	460d      	mov	r5, r1
 8003f68:	f7fc faee 	bl	8000548 <__aeabi_dmul>
 8003f6c:	a35e      	add	r3, pc, #376	@ (adr r3, 80040e8 <__ieee754_pow+0xa48>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f931 	bl	80001d8 <__aeabi_dsub>
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_dmul>
 8003f7e:	a35c      	add	r3, pc, #368	@ (adr r3, 80040f0 <__ieee754_pow+0xa50>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc f92a 	bl	80001dc <__adddf3>
 8003f88:	4622      	mov	r2, r4
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	f7fc fadc 	bl	8000548 <__aeabi_dmul>
 8003f90:	a359      	add	r3, pc, #356	@ (adr r3, 80040f8 <__ieee754_pow+0xa58>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc f91f 	bl	80001d8 <__aeabi_dsub>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc fad3 	bl	8000548 <__aeabi_dmul>
 8003fa2:	a357      	add	r3, pc, #348	@ (adr r3, 8004100 <__ieee754_pow+0xa60>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc f918 	bl	80001dc <__adddf3>
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	f7fc faca 	bl	8000548 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f90c 	bl	80001d8 <__aeabi_dsub>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4640      	mov	r0, r8
 8003fca:	4649      	mov	r1, r9
 8003fcc:	f7fc fabc 	bl	8000548 <__aeabi_dmul>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8003fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f8fb 	bl	80001d8 <__aeabi_dsub>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fea:	f7fc fbd7 	bl	800079c <__aeabi_ddiv>
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	f7fc faa5 	bl	8000548 <__aeabi_dmul>
 8003ffe:	4632      	mov	r2, r6
 8004000:	463b      	mov	r3, r7
 8004002:	f7fc f8eb 	bl	80001dc <__adddf3>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f8e3 	bl	80001d8 <__aeabi_dsub>
 8004012:	4642      	mov	r2, r8
 8004014:	464b      	mov	r3, r9
 8004016:	f7fc f8df 	bl	80001d8 <__aeabi_dsub>
 800401a:	460b      	mov	r3, r1
 800401c:	4602      	mov	r2, r0
 800401e:	493b      	ldr	r1, [pc, #236]	@ (800410c <__ieee754_pow+0xa6c>)
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc f8d9 	bl	80001d8 <__aeabi_dsub>
 8004026:	ec41 0b10 	vmov	d0, r0, r1
 800402a:	ee10 3a90 	vmov	r3, s1
 800402e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	da30      	bge.n	800409a <__ieee754_pow+0x9fa>
 8004038:	4650      	mov	r0, sl
 800403a:	f000 f87d 	bl	8004138 <scalbn>
 800403e:	ec51 0b10 	vmov	r0, r1, d0
 8004042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004046:	f7ff bbd2 	b.w	80037ee <__ieee754_pow+0x14e>
 800404a:	4c31      	ldr	r4, [pc, #196]	@ (8004110 <__ieee754_pow+0xa70>)
 800404c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004050:	42a3      	cmp	r3, r4
 8004052:	d91a      	bls.n	800408a <__ieee754_pow+0x9ea>
 8004054:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <__ieee754_pow+0xa74>)
 8004056:	440b      	add	r3, r1
 8004058:	4303      	orrs	r3, r0
 800405a:	d009      	beq.n	8004070 <__ieee754_pow+0x9d0>
 800405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	f7fc fce2 	bl	8000a2c <__aeabi_dcmplt>
 8004068:	3800      	subs	r0, #0
 800406a:	bf18      	it	ne
 800406c:	2001      	movne	r0, #1
 800406e:	e42b      	b.n	80038c8 <__ieee754_pow+0x228>
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	f7fc f8b0 	bl	80001d8 <__aeabi_dsub>
 8004078:	4632      	mov	r2, r6
 800407a:	463b      	mov	r3, r7
 800407c:	f7fc fcea 	bl	8000a54 <__aeabi_dcmpge>
 8004080:	2800      	cmp	r0, #0
 8004082:	d1eb      	bne.n	800405c <__ieee754_pow+0x9bc>
 8004084:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004124 <__ieee754_pow+0xa84>
 8004088:	e6f7      	b.n	8003e7a <__ieee754_pow+0x7da>
 800408a:	469a      	mov	sl, r3
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <__ieee754_pow+0xa78>)
 800408e:	459a      	cmp	sl, r3
 8004090:	f63f aef3 	bhi.w	8003e7a <__ieee754_pow+0x7da>
 8004094:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004098:	e715      	b.n	8003ec6 <__ieee754_pow+0x826>
 800409a:	ec51 0b10 	vmov	r0, r1, d0
 800409e:	4619      	mov	r1, r3
 80040a0:	e7cf      	b.n	8004042 <__ieee754_pow+0x9a2>
 80040a2:	491a      	ldr	r1, [pc, #104]	@ (800410c <__ieee754_pow+0xa6c>)
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff bb18 	b.w	80036da <__ieee754_pow+0x3a>
 80040aa:	2000      	movs	r0, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	f7ff bb14 	b.w	80036da <__ieee754_pow+0x3a>
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7ff bb10 	b.w	80036da <__ieee754_pow+0x3a>
 80040ba:	460c      	mov	r4, r1
 80040bc:	f7ff bb5e 	b.w	800377c <__ieee754_pow+0xdc>
 80040c0:	2400      	movs	r4, #0
 80040c2:	f7ff bb49 	b.w	8003758 <__ieee754_pow+0xb8>
 80040c6:	bf00      	nop
 80040c8:	00000000 	.word	0x00000000
 80040cc:	3fe62e43 	.word	0x3fe62e43
 80040d0:	fefa39ef 	.word	0xfefa39ef
 80040d4:	3fe62e42 	.word	0x3fe62e42
 80040d8:	0ca86c39 	.word	0x0ca86c39
 80040dc:	be205c61 	.word	0xbe205c61
 80040e0:	72bea4d0 	.word	0x72bea4d0
 80040e4:	3e663769 	.word	0x3e663769
 80040e8:	c5d26bf1 	.word	0xc5d26bf1
 80040ec:	3ebbbd41 	.word	0x3ebbbd41
 80040f0:	af25de2c 	.word	0xaf25de2c
 80040f4:	3f11566a 	.word	0x3f11566a
 80040f8:	16bebd93 	.word	0x16bebd93
 80040fc:	3f66c16c 	.word	0x3f66c16c
 8004100:	5555553e 	.word	0x5555553e
 8004104:	3fc55555 	.word	0x3fc55555
 8004108:	fff00000 	.word	0xfff00000
 800410c:	3ff00000 	.word	0x3ff00000
 8004110:	4090cbff 	.word	0x4090cbff
 8004114:	3f6f3400 	.word	0x3f6f3400
 8004118:	3fe00000 	.word	0x3fe00000
 800411c:	652b82fe 	.word	0x652b82fe
 8004120:	3c971547 	.word	0x3c971547
 8004124:	4090cc00 	.word	0x4090cc00

08004128 <fabs>:
 8004128:	ec51 0b10 	vmov	r0, r1, d0
 800412c:	4602      	mov	r2, r0
 800412e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004132:	ec43 2b10 	vmov	d0, r2, r3
 8004136:	4770      	bx	lr

08004138 <scalbn>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	ec55 4b10 	vmov	r4, r5, d0
 800413e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004142:	4606      	mov	r6, r0
 8004144:	462b      	mov	r3, r5
 8004146:	b991      	cbnz	r1, 800416e <scalbn+0x36>
 8004148:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800414c:	4323      	orrs	r3, r4
 800414e:	d03d      	beq.n	80041cc <scalbn+0x94>
 8004150:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <scalbn+0xf0>)
 8004152:	4620      	mov	r0, r4
 8004154:	4629      	mov	r1, r5
 8004156:	2200      	movs	r2, #0
 8004158:	f7fc f9f6 	bl	8000548 <__aeabi_dmul>
 800415c:	4b33      	ldr	r3, [pc, #204]	@ (800422c <scalbn+0xf4>)
 800415e:	429e      	cmp	r6, r3
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	da0f      	bge.n	8004186 <scalbn+0x4e>
 8004166:	a328      	add	r3, pc, #160	@ (adr r3, 8004208 <scalbn+0xd0>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	e01e      	b.n	80041ac <scalbn+0x74>
 800416e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004172:	4291      	cmp	r1, r2
 8004174:	d10b      	bne.n	800418e <scalbn+0x56>
 8004176:	4622      	mov	r2, r4
 8004178:	4620      	mov	r0, r4
 800417a:	4629      	mov	r1, r5
 800417c:	f7fc f82e 	bl	80001dc <__adddf3>
 8004180:	4604      	mov	r4, r0
 8004182:	460d      	mov	r5, r1
 8004184:	e022      	b.n	80041cc <scalbn+0x94>
 8004186:	460b      	mov	r3, r1
 8004188:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800418c:	3936      	subs	r1, #54	@ 0x36
 800418e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004192:	4296      	cmp	r6, r2
 8004194:	dd0d      	ble.n	80041b2 <scalbn+0x7a>
 8004196:	2d00      	cmp	r5, #0
 8004198:	a11d      	add	r1, pc, #116	@ (adr r1, 8004210 <scalbn+0xd8>)
 800419a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800419e:	da02      	bge.n	80041a6 <scalbn+0x6e>
 80041a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004218 <scalbn+0xe0>)
 80041a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8004210 <scalbn+0xd8>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f9cc 	bl	8000548 <__aeabi_dmul>
 80041b0:	e7e6      	b.n	8004180 <scalbn+0x48>
 80041b2:	1872      	adds	r2, r6, r1
 80041b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80041b8:	428a      	cmp	r2, r1
 80041ba:	dcec      	bgt.n	8004196 <scalbn+0x5e>
 80041bc:	2a00      	cmp	r2, #0
 80041be:	dd08      	ble.n	80041d2 <scalbn+0x9a>
 80041c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80041c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80041c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041cc:	ec45 4b10 	vmov	d0, r4, r5
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80041d6:	da08      	bge.n	80041ea <scalbn+0xb2>
 80041d8:	2d00      	cmp	r5, #0
 80041da:	a10b      	add	r1, pc, #44	@ (adr r1, 8004208 <scalbn+0xd0>)
 80041dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e0:	dac1      	bge.n	8004166 <scalbn+0x2e>
 80041e2:	a10f      	add	r1, pc, #60	@ (adr r1, 8004220 <scalbn+0xe8>)
 80041e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e8:	e7bd      	b.n	8004166 <scalbn+0x2e>
 80041ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80041ee:	3236      	adds	r2, #54	@ 0x36
 80041f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80041f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041f8:	4620      	mov	r0, r4
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <scalbn+0xf8>)
 80041fc:	4629      	mov	r1, r5
 80041fe:	2200      	movs	r2, #0
 8004200:	e7d4      	b.n	80041ac <scalbn+0x74>
 8004202:	bf00      	nop
 8004204:	f3af 8000 	nop.w
 8004208:	c2f8f359 	.word	0xc2f8f359
 800420c:	01a56e1f 	.word	0x01a56e1f
 8004210:	8800759c 	.word	0x8800759c
 8004214:	7e37e43c 	.word	0x7e37e43c
 8004218:	8800759c 	.word	0x8800759c
 800421c:	fe37e43c 	.word	0xfe37e43c
 8004220:	c2f8f359 	.word	0xc2f8f359
 8004224:	81a56e1f 	.word	0x81a56e1f
 8004228:	43500000 	.word	0x43500000
 800422c:	ffff3cb0 	.word	0xffff3cb0
 8004230:	3c900000 	.word	0x3c900000

08004234 <with_errno>:
 8004234:	b510      	push	{r4, lr}
 8004236:	ed2d 8b02 	vpush	{d8}
 800423a:	eeb0 8a40 	vmov.f32	s16, s0
 800423e:	eef0 8a60 	vmov.f32	s17, s1
 8004242:	4604      	mov	r4, r0
 8004244:	f000 f83c 	bl	80042c0 <__errno>
 8004248:	eeb0 0a48 	vmov.f32	s0, s16
 800424c:	eef0 0a68 	vmov.f32	s1, s17
 8004250:	ecbd 8b02 	vpop	{d8}
 8004254:	6004      	str	r4, [r0, #0]
 8004256:	bd10      	pop	{r4, pc}

08004258 <xflow>:
 8004258:	4603      	mov	r3, r0
 800425a:	b507      	push	{r0, r1, r2, lr}
 800425c:	ec51 0b10 	vmov	r0, r1, d0
 8004260:	b183      	cbz	r3, 8004284 <xflow+0x2c>
 8004262:	4602      	mov	r2, r0
 8004264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004268:	e9cd 2300 	strd	r2, r3, [sp]
 800426c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004270:	f7fc f96a 	bl	8000548 <__aeabi_dmul>
 8004274:	ec41 0b10 	vmov	d0, r0, r1
 8004278:	2022      	movs	r0, #34	@ 0x22
 800427a:	b003      	add	sp, #12
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	f7ff bfd8 	b.w	8004234 <with_errno>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	e7ee      	b.n	8004268 <xflow+0x10>
 800428a:	0000      	movs	r0, r0
 800428c:	0000      	movs	r0, r0
	...

08004290 <__math_uflow>:
 8004290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004298 <__math_uflow+0x8>
 8004294:	f7ff bfe0 	b.w	8004258 <xflow>
 8004298:	00000000 	.word	0x00000000
 800429c:	10000000 	.word	0x10000000

080042a0 <__math_oflow>:
 80042a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80042a8 <__math_oflow+0x8>
 80042a4:	f7ff bfd8 	b.w	8004258 <xflow>
 80042a8:	00000000 	.word	0x00000000
 80042ac:	70000000 	.word	0x70000000

080042b0 <memset>:
 80042b0:	4402      	add	r2, r0
 80042b2:	4603      	mov	r3, r0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d100      	bne.n	80042ba <memset+0xa>
 80042b8:	4770      	bx	lr
 80042ba:	f803 1b01 	strb.w	r1, [r3], #1
 80042be:	e7f9      	b.n	80042b4 <memset+0x4>

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	@ (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000020 	.word	0x20000020

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004304 <__libc_init_array+0x38>)
 80042d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004308 <__libc_init_array+0x3c>)
 80042d2:	1b64      	subs	r4, r4, r5
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	2600      	movs	r6, #0
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	4d0b      	ldr	r5, [pc, #44]	@ (800430c <__libc_init_array+0x40>)
 80042de:	4c0c      	ldr	r4, [pc, #48]	@ (8004310 <__libc_init_array+0x44>)
 80042e0:	f000 f818 	bl	8004314 <_init>
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	2600      	movs	r6, #0
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	080043c0 	.word	0x080043c0
 8004308:	080043c0 	.word	0x080043c0
 800430c:	080043c0 	.word	0x080043c0
 8004310:	080043c4 	.word	0x080043c4

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
