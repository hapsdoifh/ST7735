
ST7735_Driver_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042cc  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004460  08004460  00005460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  00008910  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  00008910  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  00008910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002910  20000000  08004500  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20002910  08006e10  00008910  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad0  08006e10  00008ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008910  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a324  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c4  00000000  00000000  00012c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00014528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ee  00000000  00000000  00014d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c6b  00000000  00000000  00015306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000983b  00000000  00000000  00036f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beee9  00000000  00000000  000407ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002584  00000000  00000000  000ff6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00101c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002910 	.word	0x20002910
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004444 	.word	0x08004444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002914 	.word	0x20002914
 80001cc:	08004444 	.word	0x08004444

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <_Z11WriteParamsv>:
    type c = a;
    a = b;
    b = c;
}

void WriteParams(){}
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <_Z12WriteCommandhPhh>:
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    WriteParams(Args...);
}

void WriteCommand(unsigned char Command, unsigned char* Params = NULL, unsigned char NumParams = 0){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <_Z12WriteCommandhPhh+0x64>)
 8000bbe:	f001 fa8d 	bl	80020dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_Z12WriteCommandhPhh+0x68>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	1df9      	adds	r1, r7, #7
 8000bc8:	2364      	movs	r3, #100	@ 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f002 f9a5 	bl	8002f1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <_Z12WriteCommandhPhh+0x64>)
 8000bd6:	f001 fa81 	bl	80020dc <HAL_GPIO_WritePin>
    for(int i = 0; i < NumParams; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	e00b      	b.n	8000bf8 <_Z12WriteCommandhPhh+0x50>
    	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Params[i], 1, 100);
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <_Z12WriteCommandhPhh+0x68>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	18d1      	adds	r1, r2, r3
 8000bea:	2364      	movs	r3, #100	@ 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	f002 f994 	bl	8002f1a <HAL_SPI_Transmit>
    for(int i = 0; i < NumParams; i++){
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbef      	blt.n	8000be0 <_Z12WriteCommandhPhh+0x38>
    }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	2000292c 	.word	0x2000292c

08000c14 <_Z7HWResetv>:

void HWReset(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2180      	movs	r1, #128	@ 0x80
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <_Z7HWResetv+0x24>)
 8000c1e:	f001 fa5d 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f000 ffe6 	bl	8001bf4 <HAL_Delay>
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <_Z7HWResetv+0x24>)
 8000c2e:	f001 fa55 	bl	80020dc <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <_Z11DisplayInitP19__SPI_HandleTypeDef>:

void DisplayInit(SPI_HandleTypeDef *hspi){
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	DisplayHandle = hspi;
 8000c44:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xd8>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]

	HWReset();
 8000c4a:	f7ff ffe3 	bl	8000c14 <_Z7HWResetv>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	@ 0x40
 8000c52:	4831      	ldr	r0, [pc, #196]	@ (8000d18 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xdc>)
 8000c54:	f001 fa42 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xdc>)
 8000c5e:	f001 fa3d 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 ffc6 	bl	8001bf4 <HAL_Delay>
	unsigned char InitSequence[] = {
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <_Z11DisplayInitP19__SPI_HandleTypeDef+0xe0>)
 8000c6a:	f107 040c 	add.w	r4, r7, #12
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	c403      	stmia	r4!, {r0, r1}
 8000c7a:	8022      	strh	r2, [r4, #0]
	2, COLMOD, 0x05,
	2, MADCTL, 0b01100000,
	5, CASET, 0x00,0x00, 0x00, 0x9F,
	5, RASET, 0x00,0x00, 0x00, 0x7F,
	};
	unsigned char Instruction = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while(Instruction < sizeof(InitSequence)/sizeof(char)){
 8000c82:	e024      	b.n	8000cce <_Z11DisplayInitP19__SPI_HandleTypeDef+0x92>
	WriteCommand(InitSequence[Instruction + 1], &InitSequence[Instruction + 2], InitSequence[Instruction]-1);
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c88:	3301      	adds	r3, #1
 8000c8a:	3330      	adds	r3, #48	@ 0x30
 8000c8c:	443b      	add	r3, r7
 8000c8e:	f813 0c24 	ldrb.w	r0, [r3, #-36]
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c96:	3302      	adds	r3, #2
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	18d1      	adds	r1, r2, r3
 8000c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca2:	3330      	adds	r3, #48	@ 0x30
 8000ca4:	443b      	add	r3, r7
 8000ca6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f7ff ff7a 	bl	8000ba8 <_Z12WriteCommandhPhh>
	Instruction += InitSequence[Instruction] + 1;
 8000cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb8:	3330      	adds	r3, #48	@ 0x30
 8000cba:	443b      	add	r3, r7
 8000cbc:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while(Instruction < sizeof(InitSequence)/sizeof(char)){
 8000cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cd2:	2b19      	cmp	r3, #25
 8000cd4:	d9d6      	bls.n	8000c84 <_Z11DisplayInitP19__SPI_HandleTypeDef+0x48>
	}
	WriteCommand(RAMWR);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	202c      	movs	r0, #44	@ 0x2c
 8000cdc:	f7ff ff64 	bl	8000ba8 <_Z12WriteCommandhPhh>
	for(int i = 0; i<D_WIDTH*D_HEIGHT; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce4:	e00c      	b.n	8000d00 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xc4>
		unsigned int data = 0b0000000000000000;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
		HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&data, 2, 100);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xd8>)
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	f107 0108 	add.w	r1, r7, #8
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	f002 f910 	bl	8002f1a <HAL_SPI_Transmit>
	for(int i = 0; i<D_WIDTH*D_HEIGHT; i++){
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000d06:	dbee      	blt.n	8000ce6 <_Z11DisplayInitP19__SPI_HandleTypeDef+0xaa>
	}

}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000292c 	.word	0x2000292c
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	08004460 	.word	0x08004460

08000d20 <_Z7SetAddriiii>:

void SetAddr(int RowStart, int ColStart, int RowEnd = 0x9F, int ColEnd = 0x7F){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
    WriteCommandVargs(CASET, 0x00, RowStart, 0x00, RowEnd);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	2100      	movs	r1, #0
 8000d38:	202a      	movs	r0, #42	@ 0x2a
 8000d3a:	f000 fbdf 	bl	80014fc <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>
    WriteCommandVargs(RASET, 0x00, ColStart, 0x00, ColEnd);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	2100      	movs	r1, #0
 8000d48:	202b      	movs	r0, #43	@ 0x2b
 8000d4a:	f000 fbd7 	bl	80014fc <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <_Z9DrawPixeliiji>:

void DrawPixel(int x, int y, unsigned int Color, int thickness = 2){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
    for(int Xoff = 0; Xoff < thickness; Xoff++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e02a      	b.n	8000dc2 <_Z9DrawPixeliiji+0x6a>
        for(int Yoff = 0; Yoff < thickness; Yoff++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	e020      	b.n	8000db4 <_Z9DrawPixeliiji+0x5c>
            SetAddr(x+Xoff,y+Yoff);
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	18d0      	adds	r0, r2, r3
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	18d1      	adds	r1, r2, r3
 8000d7e:	237f      	movs	r3, #127	@ 0x7f
 8000d80:	229f      	movs	r2, #159	@ 0x9f
 8000d82:	f7ff ffcd 	bl	8000d20 <_Z7SetAddriiii>
            WriteCommand(RAMWR);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	202c      	movs	r0, #44	@ 0x2c
 8000d8c:	f7ff ff0c 	bl	8000ba8 <_Z12WriteCommandhPhh>
            uint8_t Transfer[] = {(Color & 0xFF00) >> 8,  Color & 0xFF};
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	753b      	strb	r3, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	757b      	strb	r3, [r7, #21]
            HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Transfer, 2, 100);
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <_Z9DrawPixeliiji+0x7c>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	f107 0114 	add.w	r1, r7, #20
 8000da6:	2364      	movs	r3, #100	@ 0x64
 8000da8:	2202      	movs	r2, #2
 8000daa:	f002 f8b6 	bl	8002f1a <HAL_SPI_Transmit>
        for(int Yoff = 0; Yoff < thickness; Yoff++){
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	3301      	adds	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbda      	blt.n	8000d72 <_Z9DrawPixeliiji+0x1a>
    for(int Xoff = 0; Xoff < thickness; Xoff++){
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbd0      	blt.n	8000d6c <_Z9DrawPixeliiji+0x14>
        }
    }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000292c 	.word	0x2000292c

08000dd8 <_Z8DrawLineiiiij>:

void DrawLine(int StartX, int StartY, int EndX, int EndY, unsigned int Color){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	@ 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
    if(( (abs(EndX - StartX) >= abs(EndY-StartY)) && (EndX < StartX) ) || ( ((abs(EndX - StartX) < abs(EndY-StartY)) && (EndY < StartY))) ){
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000df0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1acb      	subs	r3, r1, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bfb8      	it	lt
 8000dfe:	425b      	neglt	r3, r3
 8000e00:	429a      	cmp	r2, r3
 8000e02:	db03      	blt.n	8000e0c <_Z8DrawLineiiiij+0x34>
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	db12      	blt.n	8000e32 <_Z8DrawLineiiiij+0x5a>
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfb8      	it	lt
 8000e24:	425b      	neglt	r3, r3
 8000e26:	429a      	cmp	r2, r3
 8000e28:	da11      	bge.n	8000e4e <_Z8DrawLineiiiij+0x76>
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	da0d      	bge.n	8000e4e <_Z8DrawLineiiiij+0x76>
      Swap<int>(StartX, EndX);
 8000e32:	1d3a      	adds	r2, r7, #4
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fb86 	bl	800154c <_Z4SwapIiEvRT_S1_>
      Swap<int>(StartY, EndY);
 8000e40:	463a      	mov	r2, r7
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fb7f 	bl	800154c <_Z4SwapIiEvRT_S1_>
    }
    int Cycles = max((EndX - StartX),(EndY - StartY));
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bfb8      	it	lt
 8000e66:	425b      	neglt	r3, r3
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bfb8      	it	lt
 8000e6c:	4613      	movlt	r3, r2
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float Slope = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    int StartMapping[] = {StartX, StartY};
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	623b      	str	r3, [r7, #32]
    int CoordMapping[] = {0,0}, defau_map = 1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	2301      	movs	r3, #1
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (abs(EndY - StartY) > abs(EndX - StartX)){ //if line is longer vertically rise > run
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e94:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfb8      	it	lt
 8000ea2:	425b      	neglt	r3, r3
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd16      	ble.n	8000ed6 <_Z8DrawLineiiiij+0xfe>
        if (EndY-StartY != 0){
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d02a      	beq.n	8000f06 <_Z8DrawLineiiiij+0x12e>
            Slope = float((EndX - StartX))/(EndY-StartY);
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000ed4:	e017      	b.n	8000f06 <_Z8DrawLineiiiij+0x12e>
        }
    }else{
        if (EndX - StartX != 0){
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d011      	beq.n	8000f02 <_Z8DrawLineiiiij+0x12a>
            Slope = float((EndY-StartY))/(EndX - StartX);
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        }
        defau_map = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    for(int i = 0; i <= Cycles; i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0a:	e045      	b.n	8000f98 <_Z8DrawLineiiiij+0x1c0>
        int opp_map = 1 - defau_map;
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f0e:	f1c3 0301 	rsb	r3, r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
        CoordMapping[defau_map] = int(StartMapping[defau_map] + i); //default: CoordMapping[x,y] modified:CoordMapping[y,x]
 8000f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3338      	adds	r3, #56	@ 0x38
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f22:	441a      	add	r2, r3
 8000f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	3338      	adds	r3, #56	@ 0x38
 8000f2a:	443b      	add	r3, r7
 8000f2c:	f843 2c24 	str.w	r2, [r3, #-36]
        CoordMapping[opp_map] = int(StartMapping[opp_map] + i*Slope);
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3338      	adds	r3, #56	@ 0x38
 8000f36:	443b      	add	r3, r7
 8000f38:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5e:	ee17 2a90 	vmov	r2, s15
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	3338      	adds	r3, #56	@ 0x38
 8000f68:	443b      	add	r3, r7
 8000f6a:	f843 2c24 	str.w	r2, [r3, #-36]

        if(CoordMapping[0] >= 0 && CoordMapping[0] < 160 && CoordMapping[1] >= 0 && CoordMapping[1] < 128)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0e      	blt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f78:	dc0b      	bgt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db08      	blt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f84:	dc05      	bgt.n	8000f92 <_Z8DrawLineiiiij+0x1ba>
        DrawPixel(CoordMapping[0], CoordMapping[1], Color);
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f8e:	f7ff fee3 	bl	8000d58 <_Z9DrawPixeliiji>
    for(int i = 0; i <= Cycles; i++){
 8000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f94:	3301      	adds	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	ddb5      	ble.n	8000f0c <_Z8DrawLineiiiij+0x134>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3738      	adds	r7, #56	@ 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <_Z11DrawEllipseiiiiii>:
    DrawLine(StartX, StartY, StartX, EndY, Color);
    DrawLine(StartX, EndY, EndX,EndY, Color);
    DrawLine(EndX, StartY, EndX, EndY, Color);
}

void DrawEllipse(int StartX, int StartY, int EndX, int EndY, int Color, int mapping){
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	ed2d 8b02 	vpush	{d8}
 8000fb2:	b09e      	sub	sp, #120	@ 0x78
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
    if((abs(EndX - StartX) >= abs(EndY-StartY) && EndX < StartX) || (abs(EndX - StartX) < abs(EndY-StartY) && EndY < StartY)){
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfb8      	it	lt
 8000fd6:	425b      	neglt	r3, r3
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	db03      	blt.n	8000fe4 <_Z11DrawEllipseiiiiii+0x38>
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	db12      	blt.n	800100a <_Z11DrawEllipseiiiiii+0x5e>
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bfb8      	it	lt
 8000ffc:	425b      	neglt	r3, r3
 8000ffe:	429a      	cmp	r2, r3
 8001000:	da11      	bge.n	8001026 <_Z11DrawEllipseiiiiii+0x7a>
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	429a      	cmp	r2, r3
 8001008:	da0d      	bge.n	8001026 <_Z11DrawEllipseiiiiii+0x7a>
        Swap<int>(StartX, EndX);
 800100a:	1d3a      	adds	r2, r7, #4
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa9a 	bl	800154c <_Z4SwapIiEvRT_S1_>
        Swap<int>(StartY, EndY);
 8001018:	463a      	mov	r2, r7
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fa93 	bl	800154c <_Z4SwapIiEvRT_S1_>
    }
    int Cycles[2] = {(EndX - StartX),(EndY - StartY)};
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
    int Center[2] = {(StartX+EndX)/2,(StartY+EndY)/2};
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	0fda      	lsrs	r2, r3, #31
 800103e:	4413      	add	r3, r2
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	0fda      	lsrs	r2, r3, #31
 800104c:	4413      	add	r3, r2
 800104e:	105b      	asrs	r3, r3, #1
 8001050:	643b      	str	r3, [r7, #64]	@ 0x40
    int Offset[2] = {abs(StartX-EndX)/2,abs(StartY-EndY)/2};
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	0fda      	lsrs	r2, r3, #31
 8001060:	4413      	add	r3, r2
 8001062:	105b      	asrs	r3, r3, #1
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	bfb8      	it	lt
 8001070:	425b      	neglt	r3, r3
 8001072:	0fda      	lsrs	r2, r3, #31
 8001074:	4413      	add	r3, r2
 8001076:	105b      	asrs	r3, r3, #1
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
    int VertexA = abs(EndX-StartX)/2, VertexB = abs(EndY-StartY)/2;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	0fda      	lsrs	r2, r3, #31
 8001088:	4413      	add	r3, r2
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	663b      	str	r3, [r7, #96]	@ 0x60
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	bfb8      	it	lt
 8001098:	425b      	neglt	r3, r3
 800109a:	0fda      	lsrs	r2, r3, #31
 800109c:	4413      	add	r3, r2
 800109e:	105b      	asrs	r3, r3, #1
 80010a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int Verticies[2] = {VertexA, VertexB};
 80010a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
    int CoordMapping[2] = {0,0}, defau_map = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010b2:	2300      	movs	r3, #0
 80010b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (abs(EndY - StartY) > abs(EndX - StartX)){ //if line is longer vertically rise > run
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1acb      	subs	r3, r1, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bfb8      	it	lt
 80010ce:	425b      	neglt	r3, r3
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dd01      	ble.n	80010d8 <_Z11DrawEllipseiiiiii+0x12c>
        defau_map = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if(mapping != -1){
 80010d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d003      	beq.n	80010ea <_Z11DrawEllipseiiiiii+0x13e>
        defau_map = mapping;
 80010e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010e8:	e00d      	b.n	8001106 <_Z11DrawEllipseiiiiii+0x15a>
    }else{
        DrawEllipse(StartX, StartY, EndX, EndY, Color, 1 - defau_map);
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	683c      	ldr	r4, [r7, #0]
 80010f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010f4:	f1c3 0301 	rsb	r3, r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4623      	mov	r3, r4
 8001102:	f7ff ff53 	bl	8000fac <_Z11DrawEllipseiiiiii>
    }
    int opp_map = 1 - defau_map;
 8001106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001108:	f1c3 0301 	rsb	r3, r3, #1
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(int i = 0; i <= Cycles[defau_map]; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001112:	e0ec      	b.n	80012ee <_Z11DrawEllipseiiiiii+0x342>
        CoordMapping[defau_map] = int(i); //default: CoordMapping[x,y] modified:CoordMapping[y,x]
 8001114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	3370      	adds	r3, #112	@ 0x70
 800111a:	443b      	add	r3, r7
 800111c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800111e:	f843 2c4c 	str.w	r2, [r3, #-76]
        int X = CoordMapping[defau_map];
 8001122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3370      	adds	r3, #112	@ 0x70
 8001128:	443b      	add	r3, r7
 800112a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800112e:	657b      	str	r3, [r7, #84]	@ 0x54
        CoordMapping[opp_map] = sqrt(((1.0 - float( pow(X-Verticies[defau_map],2)) /(  float(pow(Verticies[defau_map],2)) ))) * pow(float(Verticies[opp_map]),2));
 8001130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3370      	adds	r3, #112	@ 0x70
 8001136:	443b      	add	r3, r7
 8001138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800113c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fa17 	bl	8001576 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001148:	ec53 2b10 	vmov	r2, r3, d0
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fcd2 	bl	8000af8 <__aeabi_d2f>
 8001154:	ee08 0a10 	vmov	s16, r0
 8001158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	3370      	adds	r3, #112	@ 0x70
 800115e:	443b      	add	r3, r7
 8001160:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa05 	bl	8001576 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800116c:	ec53 2b10 	vmov	r2, r3, d0
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcc0 	bl	8000af8 <__aeabi_d2f>
 8001178:	ee07 0a10 	vmov	s14, r0
 800117c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001180:	ee17 0a90 	vmov	r0, s15
 8001184:	f7ff f988 	bl	8000498 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	495f      	ldr	r1, [pc, #380]	@ (8001310 <_Z11DrawEllipseiiiiii+0x364>)
 8001192:	f7ff f821 	bl	80001d8 <__aeabi_dsub>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4614      	mov	r4, r2
 800119c:	461d      	mov	r5, r3
 800119e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3370      	adds	r3, #112	@ 0x70
 80011a4:	443b      	add	r3, r7
 80011a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	2002      	movs	r0, #2
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f000 f9fd 	bl	80015b6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011bc:	ec53 2b10 	vmov	r2, r3, d0
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f9c0 	bl	8000548 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ec43 2b17 	vmov	d7, r2, r3
 80011d0:	eeb0 0a47 	vmov.f32	s0, s14
 80011d4:	eef0 0a67 	vmov.f32	s1, s15
 80011d8:	f002 f9e8 	bl	80035ac <sqrt>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc60 	bl	8000aa8 <__aeabi_d2iz>
 80011e8:	4602      	mov	r2, r0
 80011ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	3370      	adds	r3, #112	@ 0x70
 80011f0:	443b      	add	r3, r7
 80011f2:	f843 2c4c 	str.w	r2, [r3, #-76]

        for(int j = 1; j > -2; j-=2){
 80011f6:	2301      	movs	r3, #1
 80011f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80011fa:	e071      	b.n	80012e0 <_Z11DrawEllipseiiiiii+0x334>
            int OffsetMapping[2] = {0, 0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
            OffsetMapping[defau_map] = -Offset[defau_map];
 8001204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	3370      	adds	r3, #112	@ 0x70
 800120a:	443b      	add	r3, r7
 800120c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001210:	425a      	negs	r2, r3
 8001212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3370      	adds	r3, #112	@ 0x70
 8001218:	443b      	add	r3, r7
 800121a:	f843 2c54 	str.w	r2, [r3, #-84]
            int OutputMapping[] = {0,0};
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
            CoordMapping[opp_map] *= j;
 8001226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	3370      	adds	r3, #112	@ 0x70
 800122c:	443b      	add	r3, r7
 800122e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001232:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	3370      	adds	r3, #112	@ 0x70
 800123e:	443b      	add	r3, r7
 8001240:	f843 2c4c 	str.w	r2, [r3, #-76]
            OutputMapping[defau_map] = Center[defau_map] + CoordMapping[defau_map] + OffsetMapping[defau_map];
 8001244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3370      	adds	r3, #112	@ 0x70
 800124a:	443b      	add	r3, r7
 800124c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3370      	adds	r3, #112	@ 0x70
 8001256:	443b      	add	r3, r7
 8001258:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800125c:	441a      	add	r2, r3
 800125e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	3370      	adds	r3, #112	@ 0x70
 8001264:	443b      	add	r3, r7
 8001266:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800126a:	441a      	add	r2, r3
 800126c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	3370      	adds	r3, #112	@ 0x70
 8001272:	443b      	add	r3, r7
 8001274:	f843 2c5c 	str.w	r2, [r3, #-92]
            OutputMapping[opp_map] = Center[opp_map] + CoordMapping[opp_map] + OffsetMapping[opp_map];
 8001278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3370      	adds	r3, #112	@ 0x70
 800127e:	443b      	add	r3, r7
 8001280:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3370      	adds	r3, #112	@ 0x70
 800128a:	443b      	add	r3, r7
 800128c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001290:	441a      	add	r2, r3
 8001292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3370      	adds	r3, #112	@ 0x70
 8001298:	443b      	add	r3, r7
 800129a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800129e:	441a      	add	r2, r3
 80012a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	3370      	adds	r3, #112	@ 0x70
 80012a6:	443b      	add	r3, r7
 80012a8:	f843 2c5c 	str.w	r2, [r3, #-92]
            int XCoord = OutputMapping[0], YCoord = OutputMapping[1];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if(XCoord >= 0 && XCoord < 160 && YCoord >= 0 && YCoord < 128)
 80012b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0f      	blt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012bc:	2b9f      	cmp	r3, #159	@ 0x9f
 80012be:	dc0c      	bgt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db09      	blt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
 80012c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ca:	dc06      	bgt.n	80012da <_Z11DrawEllipseiiiiii+0x32e>
              DrawPixel(XCoord, YCoord, Color, 2);
 80012cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80012d0:	2302      	movs	r3, #2
 80012d2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80012d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012d6:	f7ff fd3f 	bl	8000d58 <_Z9DrawPixeliiji>
        for(int j = 1; j > -2; j-=2){
 80012da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012dc:	3b02      	subs	r3, #2
 80012de:	667b      	str	r3, [r7, #100]	@ 0x64
 80012e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	da89      	bge.n	80011fc <_Z11DrawEllipseiiiiii+0x250>
    for(int i = 0; i <= Cycles[defau_map]; i++){
 80012e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012ea:	3301      	adds	r3, #1
 80012ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	3370      	adds	r3, #112	@ 0x70
 80012f4:	443b      	add	r3, r7
 80012f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80012fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f77f af09 	ble.w	8001114 <_Z11DrawEllipseiiiiii+0x168>
        }
    }
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3770      	adds	r7, #112	@ 0x70
 8001308:	46bd      	mov	sp, r7
 800130a:	ecbd 8b02 	vpop	{d8}
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	3ff00000 	.word	0x3ff00000

08001314 <_Z13DrawCharacterciitt>:

void DrawCharacter(char Character, int StartX, int StartY, uint16_t ForegndColor, uint16_t BckgndColor){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	461a      	mov	r2, r3
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	4613      	mov	r3, r2
 8001326:	81bb      	strh	r3, [r7, #12]
	SetAddr(StartX, StartY, StartX + 9, StartY + 9);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f103 0209 	add.w	r2, r3, #9
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3309      	adds	r3, #9
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	68b8      	ldr	r0, [r7, #8]
 8001336:	f7ff fcf3 	bl	8000d20 <_Z7SetAddriiii>
	WriteCommand(RAMWR);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	202c      	movs	r0, #44	@ 0x2c
 8001340:	f7ff fc32 	bl	8000ba8 <_Z12WriteCommandhPhh>
	for(int i = 0; i < 100; i++){
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e026      	b.n	8001398 <_Z13DrawCharacterciitt+0x84>
		uint16_t data[] = {(ForegndColor & 0xFF00) >> 8, ForegndColor & 0xFF};
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	823b      	strh	r3, [r7, #16]
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b29b      	uxth	r3, r3
 8001358:	827b      	strh	r3, [r7, #18]
		if(CapFont[Character - 65][i] == 0){
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3b41      	subs	r3, #65	@ 0x41
 800135e:	4912      	ldr	r1, [pc, #72]	@ (80013a8 <_Z13DrawCharacterciitt+0x94>)
 8001360:	2264      	movs	r2, #100	@ 0x64
 8001362:	fb03 f202 	mul.w	r2, r3, r2
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4413      	add	r3, r2
 800136a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <_Z13DrawCharacterciitt+0x6e>
			data[0] = (BckgndColor & 0xFF00) >> 8;
 8001372:	8c3b      	ldrh	r3, [r7, #32]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b29b      	uxth	r3, r3
 8001378:	823b      	strh	r3, [r7, #16]
			data[1] = BckgndColor & 0xFF;
 800137a:	8c3b      	ldrh	r3, [r7, #32]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	827b      	strh	r3, [r7, #18]
		}
		HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&data, 2, 100);
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <_Z13DrawCharacterciitt+0x98>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f107 0110 	add.w	r1, r7, #16
 800138a:	2364      	movs	r3, #100	@ 0x64
 800138c:	2202      	movs	r2, #2
 800138e:	f001 fdc4 	bl	8002f1a <HAL_SPI_Transmit>
	for(int i = 0; i < 100; i++){
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b63      	cmp	r3, #99	@ 0x63
 800139c:	ddd5      	ble.n	800134a <_Z13DrawCharacterciitt+0x36>
	}
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	2000292c 	.word	0x2000292c

080013b0 <_Z9WriteTextPciiitt>:

void WriteText(char* text, int length, int StartX, int StartY, uint16_t ForegndColor, uint16_t BckgndColor){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	const int TextGap = 3;
 80013be:	2303      	movs	r3, #3
 80013c0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < length - 1; i++){
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e011      	b.n	80013ec <_Z9WriteTextPciiitt+0x3c>
		DrawCharacter(text[i], StartX, StartY, ForegndColor, BckgndColor);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	8c3a      	ldrh	r2, [r7, #32]
 80013d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4613      	mov	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f7ff ff9a 	bl	8001314 <_Z13DrawCharacterciitt>
		StartX += 9;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3309      	adds	r3, #9
 80013e4:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < length - 1; i++){
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbe8      	blt.n	80013c8 <_Z9WriteTextPciiitt+0x18>
	}
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_Z8GenColorjjj>:
		Data = (image[i] & 0xFF);
		HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Data, 1, 100);
	}
}

unsigned int GenColor(unsigned int R, unsigned int G, unsigned int B){
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
    R = R <= 0x1F ? R : 0x1F;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b1f      	cmp	r3, #31
 8001410:	bf28      	it	cs
 8001412:	231f      	movcs	r3, #31
 8001414:	60fb      	str	r3, [r7, #12]
    G = G <= 0x3F ? G : 0x3F;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b3f      	cmp	r3, #63	@ 0x3f
 800141a:	bf28      	it	cs
 800141c:	233f      	movcs	r3, #63	@ 0x3f
 800141e:	60bb      	str	r3, [r7, #8]
    B = B <= 0x1F ? B : 0x1F;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	bf28      	it	cs
 8001426:	231f      	movcs	r3, #31
 8001428:	607b      	str	r3, [r7, #4]
    return((R<<11) + (G<<5) + B);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	02da      	lsls	r2, r3, #11
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	441a      	add	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_Z10ColorRatiofff>:

unsigned int ColorRatio(float R, float G, float B){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	ed87 0a03 	vstr	s0, [r7, #12]
 800144e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001452:	ed87 1a01 	vstr	s2, [r7, #4]
    R = R <= 1.0 ? R : 1.0;
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800145e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d801      	bhi.n	800146c <_Z10ColorRatiofff+0x28>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	e001      	b.n	8001470 <_Z10ColorRatiofff+0x2c>
 800146c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001470:	60fb      	str	r3, [r7, #12]
    G = G <= 1.0 ? G : 1.0;
 8001472:	edd7 7a02 	vldr	s15, [r7, #8]
 8001476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800147a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	d801      	bhi.n	8001488 <_Z10ColorRatiofff+0x44>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	e001      	b.n	800148c <_Z10ColorRatiofff+0x48>
 8001488:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800148c:	60bb      	str	r3, [r7, #8]
    B = B <= 1.0 ? B : 1.0;
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d801      	bhi.n	80014a4 <_Z10ColorRatiofff+0x60>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e001      	b.n	80014a8 <_Z10ColorRatiofff+0x64>
 80014a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014a8:	607b      	str	r3, [r7, #4]
    return GenColor(int(R * 31), int(G * 63), int(B * 31));
 80014aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ae:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ba:	ee17 3a90 	vmov	r3, s15
 80014be:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80014f8 <_Z10ColorRatiofff+0xb4>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 1a90 	vmov	r1, s15
 80014d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d6:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e2:	ee17 2a90 	vmov	r2, s15
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff8a 	bl	8001400 <_Z8GenColorjjj>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	427c0000 	.word	0x427c0000

080014fc <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_>:
void WriteCommandVargs(command Command, VarArgs... Args){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2101      	movs	r1, #1
 800150e:	480d      	ldr	r0, [pc, #52]	@ (8001544 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x48>)
 8001510:	f000 fde4 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&Command, 1, 100);
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x4c>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	f107 010c 	add.w	r1, r7, #12
 800151c:	2364      	movs	r3, #100	@ 0x64
 800151e:	2201      	movs	r2, #1
 8001520:	f001 fcfb 	bl	8002f1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2101      	movs	r1, #1
 8001528:	4806      	ldr	r0, [pc, #24]	@ (8001544 <_Z17WriteCommandVargsIiJiiiiEEvT_DpT0_+0x48>)
 800152a:	f000 fdd7 	bl	80020dc <HAL_GPIO_WritePin>
    WriteParams(Args...);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f000 f85f 	bl	80015f8 <_Z11WriteParamsIiJiiiEEvT_DpT0_>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	48000400 	.word	0x48000400
 8001548:	2000292c 	.word	0x2000292c

0800154c <_Z4SwapIiEvRT_S1_>:
void Swap(type &a, type &b){
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    type c = a;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
    a = b;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
    b = c;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001576:	b5b0      	push	{r4, r5, r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe ff77 	bl	8000474 <__aeabi_i2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f7fe ff72 	bl	8000474 <__aeabi_i2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	ec43 2b11 	vmov	d1, r2, r3
 8001598:	ec45 4b10 	vmov	d0, r4, r5
 800159c:	f001 ff96 	bl	80034cc <pow>
 80015a0:	eeb0 7a40 	vmov.f32	s14, s0
 80015a4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80015a8:	eeb0 0a47 	vmov.f32	s0, s14
 80015ac:	eef0 0a67 	vmov.f32	s1, s15
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bdb0      	pop	{r4, r5, r7, pc}

080015b6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80015b6:	b5b0      	push	{r4, r5, r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80015c0:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe ff68 	bl	8000498 <__aeabi_f2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f7fe ff51 	bl	8000474 <__aeabi_i2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	ec43 2b11 	vmov	d1, r2, r3
 80015da:	ec45 4b10 	vmov	d0, r4, r5
 80015de:	f001 ff75 	bl	80034cc <pow>
 80015e2:	eeb0 7a40 	vmov.f32	s14, s0
 80015e6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80015ea:	eeb0 0a47 	vmov.f32	s0, s14
 80015ee:	eef0 0a67 	vmov.f32	s1, s15
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}

080015f8 <_Z11WriteParamsIiJiiiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_Z11WriteParamsIiJiiiEEvT_DpT0_+0x30>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	f107 010c 	add.w	r1, r7, #12
 800160e:	2364      	movs	r3, #100	@ 0x64
 8001610:	2201      	movs	r2, #1
 8001612:	f001 fc82 	bl	8002f1a <HAL_SPI_Transmit>
    WriteParams(Args...);
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f000 f806 	bl	800162c <_Z11WriteParamsIiJiiEEvT_DpT0_>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000292c 	.word	0x2000292c

0800162c <_Z11WriteParamsIiJiiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <_Z11WriteParamsIiJiiEEvT_DpT0_+0x2c>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	f107 010c 	add.w	r1, r7, #12
 8001640:	2364      	movs	r3, #100	@ 0x64
 8001642:	2201      	movs	r2, #1
 8001644:	f001 fc69 	bl	8002f1a <HAL_SPI_Transmit>
    WriteParams(Args...);
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68b8      	ldr	r0, [r7, #8]
 800164c:	f000 f806 	bl	800165c <_Z11WriteParamsIiJiEEvT_DpT0_>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000292c 	.word	0x2000292c

0800165c <_Z11WriteParamsIiJiEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <_Z11WriteParamsIiJiEEvT_DpT0_+0x28>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	1d39      	adds	r1, r7, #4
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	2201      	movs	r2, #1
 8001670:	f001 fc53 	bl	8002f1a <HAL_SPI_Transmit>
    WriteParams(Args...);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f000 f807 	bl	8001688 <_Z11WriteParamsIiJEEvT_DpT0_>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000292c 	.word	0x2000292c

08001688 <_Z11WriteParamsIiJEEvT_DpT0_>:
void WriteParams(First first, VarArgs... Args){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(DisplayHandle, (uint8_t*)&first, 1, 100);
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <_Z11WriteParamsIiJEEvT_DpT0_+0x24>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	1d39      	adds	r1, r7, #4
 8001696:	2364      	movs	r3, #100	@ 0x64
 8001698:	2201      	movs	r2, #1
 800169a:	f001 fc3e 	bl	8002f1a <HAL_SPI_Transmit>
    WriteParams(Args...);
 800169e:	f7ff fa7b 	bl	8000b98 <_Z11WriteParamsv>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000292c 	.word	0x2000292c

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f000 fa28 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 f86b 	bl	8001794 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 f90f 	bl	80018e0 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80016c2:	f000 f8c9 	bl	8001858 <_ZL12MX_SPI1_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DisplayInit(&hspi1);
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <main+0xcc>)
 80016c8:	f7ff fab8 	bl	8000c3c <_Z11DisplayInitP19__SPI_HandleTypeDef>
  DrawLine(0,64,159,64,ColorRatio(0.2, 0.3, 0.4));
 80016cc:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8001780 <main+0xd0>
 80016d0:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001784 <main+0xd4>
 80016d4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001788 <main+0xd8>
 80016d8:	f7ff feb4 	bl	8001444 <_Z10ColorRatiofff>
 80016dc:	4603      	mov	r3, r0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	229f      	movs	r2, #159	@ 0x9f
 80016e4:	2140      	movs	r1, #64	@ 0x40
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fb76 	bl	8000dd8 <_Z8DrawLineiiiij>
  DrawLine(80,0,80,127,ColorRatio(0.2, 0.3, 0.4));
 80016ec:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001780 <main+0xd0>
 80016f0:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8001784 <main+0xd4>
 80016f4:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001788 <main+0xd8>
 80016f8:	f7ff fea4 	bl	8001444 <_Z10ColorRatiofff>
 80016fc:	4603      	mov	r3, r0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	237f      	movs	r3, #127	@ 0x7f
 8001702:	2250      	movs	r2, #80	@ 0x50
 8001704:	2100      	movs	r1, #0
 8001706:	2050      	movs	r0, #80	@ 0x50
 8001708:	f7ff fb66 	bl	8000dd8 <_Z8DrawLineiiiij>
  DrawEllipse(0,0,159,127,ColorRatio(1, 0, 0));
 800170c:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 800178c <main+0xdc>
 8001710:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 800178c <main+0xdc>
 8001714:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001718:	f7ff fe94 	bl	8001444 <_Z10ColorRatiofff>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	237f      	movs	r3, #127	@ 0x7f
 800172a:	229f      	movs	r2, #159	@ 0x9f
 800172c:	2100      	movs	r1, #0
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fc3c 	bl	8000fac <_Z11DrawEllipseiiiiii>
  int gap = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
//  for(int i = 0; i < 10; i++){
//	  DrawCharacter(i + 65, i * 10 + gap, 10);
//	  gap++;
//  }
  WriteText("HELLO", sizeof("HELLO")/sizeof(char), 60, 40, ColorRatio(0,1,0), ColorRatio(0,1,0));
 8001738:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 800178c <main+0xdc>
 800173c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001740:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800178c <main+0xdc>
 8001744:	f7ff fe7e 	bl	8001444 <_Z10ColorRatiofff>
 8001748:	4603      	mov	r3, r0
 800174a:	b29c      	uxth	r4, r3
 800174c:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800178c <main+0xdc>
 8001750:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001754:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800178c <main+0xdc>
 8001758:	f7ff fe74 	bl	8001444 <_Z10ColorRatiofff>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	9400      	str	r4, [sp, #0]
 8001764:	2328      	movs	r3, #40	@ 0x28
 8001766:	223c      	movs	r2, #60	@ 0x3c
 8001768:	2106      	movs	r1, #6
 800176a:	4809      	ldr	r0, [pc, #36]	@ (8001790 <main+0xe0>)
 800176c:	f7ff fe20 	bl	80013b0 <_Z9WriteTextPciiitt>
  HAL_Delay(1000);
 8001770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001774:	f000 fa3e 	bl	8001bf4 <HAL_Delay>
//  DrawImage(ImageData);
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <main+0xc8>
 800177c:	20002930 	.word	0x20002930
 8001780:	3ecccccd 	.word	0x3ecccccd
 8001784:	3e99999a 	.word	0x3e99999a
 8001788:	3e4ccccd 	.word	0x3e4ccccd
 800178c:	00000000 	.word	0x00000000
 8001790:	0800447c 	.word	0x0800447c

08001794 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	@ 0x58
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2244      	movs	r2, #68	@ 0x44
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fe1c 	bl	80043e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017ba:	f000 fcb5 	bl	8002128 <HAL_PWREx_ControlVoltageScaling>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80017ce:	f000 f8c5 	bl	800195c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017d2:	2310      	movs	r3, #16
 80017d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017de:	2360      	movs	r3, #96	@ 0x60
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017e6:	2301      	movs	r3, #1
 80017e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80017ee:	2314      	movs	r3, #20
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017f2:	2307      	movs	r3, #7
 80017f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fce6 	bl	80021d4 <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8001818:	f000 f8a0 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181c:	230f      	movs	r3, #15
 800181e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001820:	2303      	movs	r3, #3
 8001822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f001 f8e1 	bl	80029fc <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800184a:	f000 f887 	bl	800195c <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3758      	adds	r7, #88	@ 0x58
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 800185e:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <_ZL12MX_SPI1_Initv+0x84>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001864:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 800186c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001870:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001874:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001890:	2210      	movs	r2, #16
 8001892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 80018b4:	2208      	movs	r2, #8
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b8:	4807      	ldr	r0, [pc, #28]	@ (80018d8 <_ZL12MX_SPI1_Initv+0x80>)
 80018ba:	f001 fa8b 	bl	8002dd4 <HAL_SPI_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <_ZL12MX_SPI1_Initv+0x7a>
  {
    Error_Handler();
 80018ce:	f000 f845 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20002930 	.word	0x20002930
 80018dc:	40013000 	.word	0x40013000

080018e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a10      	ldr	r2, [pc, #64]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <_ZL12MX_GPIO_Initv+0x74>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	21c1      	movs	r1, #193	@ 0xc1
 800192a:	480b      	ldr	r0, [pc, #44]	@ (8001958 <_ZL12MX_GPIO_Initv+0x78>)
 800192c:	f000 fbd6 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001930:	23c1      	movs	r3, #193	@ 0xc1
 8001932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4804      	ldr	r0, [pc, #16]	@ (8001958 <_ZL12MX_GPIO_Initv+0x78>)
 8001948:	f000 fa5e 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	@ 0x60
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_MspInit+0x44>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	@ 0x58
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_MspInit+0x44>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_SPI_MspInit+0x7c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d128      	bne.n	8001a24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d6:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_SPI_MspInit+0x80>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001a02:	2382      	movs	r3, #130	@ 0x82
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a20:	f000 f9f2 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40013000 	.word	0x40013000
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f893 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
       ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff ffea 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fc89 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fde1 	bl	80016b0 <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
       ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20002910 	.word	0x20002910
  ldr r2, =_sidata
 8001afc:	08004500 	.word	0x08004500
  ldr r2, =_sbss
 8001b00:	20002910 	.word	0x20002910
  ldr r4, =_ebss
 8001b04:	20002ad0 	.word	0x20002ad0

08001b08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_IRQHandler>

08001b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f943 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 f80e 	bl	8001b3c <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff ff1c 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <HAL_InitTick+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_InitTick+0x70>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f941 	bl	8001dee <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d809      	bhi.n	8001b8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f919 	bl	8001db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <HAL_InitTick+0x74>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e004      	b.n	8001b9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e001      	b.n	8001b9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200028a8 	.word	0x200028a8
 8001bac:	200028a0 	.word	0x200028a0
 8001bb0:	200028a4 	.word	0x200028a4

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200028a8 	.word	0x200028a8
 8001bd8:	20002994 	.word	0x20002994

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20002994 	.word	0x20002994

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200028a8 	.word	0x200028a8

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff8e 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff47 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff5c 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff8e 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5d 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffb0 	bl	8001d5c <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e148      	b.n	80020aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 813a 	beq.w	80020a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x40>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d123      	bne.n	8001f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8094 	beq.w	80020a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f80:	4a51      	ldr	r2, [pc, #324]	@ (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f88:	4b4f      	ldr	r3, [pc, #316]	@ (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f94:	4a4d      	ldr	r2, [pc, #308]	@ (80020cc <HAL_GPIO_Init+0x2c4>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1d4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a43      	ldr	r2, [pc, #268]	@ (80020d0 <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1d0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1cc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1d6>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fee:	4937      	ldr	r1, [pc, #220]	@ (80020cc <HAL_GPIO_Init+0x2c4>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002020:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002026:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204a:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002050:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a18      	ldr	r2, [pc, #96]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209e:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f aeaf 	bne.w	8001e18 <HAL_GPIO_Init+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_PWREx_GetVoltageRange+0x18>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002136:	d130      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002144:	d038      	beq.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002150:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002156:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2232      	movs	r2, #50	@ 0x32
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9b      	lsrs	r3, r3, #18
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216c:	e002      	b.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3b01      	subs	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002180:	d102      	bne.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f2      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002194:	d110      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e00f      	b.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a6:	d007      	beq.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b0:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000
 80021cc:	200028a0 	.word	0x200028a0
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f000 bc02 	b.w	80029ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e8:	4b96      	ldr	r3, [pc, #600]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f2:	4b94      	ldr	r3, [pc, #592]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80e4 	beq.w	80023d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_RCC_OscConfig+0x4c>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	f040 808b 	bne.w	800232e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b01      	cmp	r3, #1
 800221c:	f040 8087 	bne.w	800232e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002220:	4b88      	ldr	r3, [pc, #544]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x64>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e3d9      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	4b81      	ldr	r3, [pc, #516]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_RCC_OscConfig+0x7e>
 8002248:	4b7e      	ldr	r3, [pc, #504]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002250:	e005      	b.n	800225e <HAL_RCC_OscConfig+0x8a>
 8002252:	4b7c      	ldr	r3, [pc, #496]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800225e:	4293      	cmp	r3, r2
 8002260:	d223      	bcs.n	80022aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fd54 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3ba      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002276:	4b73      	ldr	r3, [pc, #460]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a72      	ldr	r2, [pc, #456]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b70      	ldr	r3, [pc, #448]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	496d      	ldr	r1, [pc, #436]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002294:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	4968      	ldr	r1, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e025      	b.n	80022f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022aa:	4b66      	ldr	r3, [pc, #408]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a65      	ldr	r2, [pc, #404]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4960      	ldr	r1, [pc, #384]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	495b      	ldr	r1, [pc, #364]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fd14 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e37a      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022f6:	f000 fc81 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	4950      	ldr	r1, [pc, #320]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a4e      	ldr	r2, [pc, #312]	@ (800244c <HAL_RCC_OscConfig+0x278>)
 8002314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002316:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc0e 	bl	8001b3c <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d052      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	e35e      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d032      	beq.n	800239c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a42      	ldr	r2, [pc, #264]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002342:	f7ff fc4b 	bl	8001bdc <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800234a:	f7ff fc47 	bl	8001bdc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e347      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800235c:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a35      	ldr	r2, [pc, #212]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b33      	ldr	r3, [pc, #204]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4930      	ldr	r1, [pc, #192]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	492b      	ldr	r1, [pc, #172]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
 800239a:	e01a      	b.n	80023d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800239c:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fc18 	bl	8001bdc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b0:	f7ff fc14 	bl	8001bdc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e314      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1dc>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d073      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_OscConfig+0x21c>
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d10e      	bne.n	8002408 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d10b      	bne.n	8002408 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d063      	beq.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d15f      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e2f1      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x24c>
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e025      	b.n	800246c <HAL_RCC_OscConfig+0x298>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002428:	d114      	bne.n	8002454 <HAL_RCC_OscConfig+0x280>
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a02      	ldr	r2, [pc, #8]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e013      	b.n	800246c <HAL_RCC_OscConfig+0x298>
 8002444:	40021000 	.word	0x40021000
 8002448:	08004484 	.word	0x08004484
 800244c:	200028a0 	.word	0x200028a0
 8002450:	200028a4 	.word	0x200028a4
 8002454:	4ba0      	ldr	r3, [pc, #640]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a9f      	ldr	r2, [pc, #636]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b9d      	ldr	r3, [pc, #628]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a9c      	ldr	r2, [pc, #624]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff fbb2 	bl	8001bdc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7ff fbae 	bl	8001bdc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	@ 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e2ae      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	4b92      	ldr	r3, [pc, #584]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x2a8>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fb9e 	bl	8001bdc <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff fb9a 	bl	8001bdc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e29a      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2d0>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d060      	beq.n	8002594 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x310>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d119      	bne.n	8002512 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d116      	bne.n	8002512 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	4b7c      	ldr	r3, [pc, #496]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x328>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e277      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	4973      	ldr	r1, [pc, #460]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	e040      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d023      	beq.n	8002562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251a:	4b6f      	ldr	r3, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6e      	ldr	r2, [pc, #440]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7ff fb59 	bl	8001bdc <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff fb55 	bl	8001bdc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e255      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	4b65      	ldr	r3, [pc, #404]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b62      	ldr	r3, [pc, #392]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	495f      	ldr	r1, [pc, #380]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
 8002560:	e018      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b5d      	ldr	r3, [pc, #372]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5c      	ldr	r2, [pc, #368]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fb35 	bl	8001bdc <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fb31 	bl	8001bdc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e231      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002588:	4b53      	ldr	r3, [pc, #332]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d03c      	beq.n	800261a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a8:	4b4b      	ldr	r3, [pc, #300]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ae:	4a4a      	ldr	r2, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7ff fb10 	bl	8001bdc <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff fb0c 	bl	8001bdc <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e20c      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d2:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ef      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3ec>
 80025e0:	e01b      	b.n	800261a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e2:	4b3d      	ldr	r3, [pc, #244]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80025e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e8:	4a3b      	ldr	r2, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7ff faf3 	bl	8001bdc <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fa:	f7ff faef 	bl	8001bdc <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e1ef      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800260c:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800260e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ef      	bne.n	80025fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80a6 	beq.w	8002774 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	4a26      	ldr	r2, [pc, #152]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	@ 0x58
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_RCC_OscConfig+0x508>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d118      	bne.n	8002692 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <HAL_RCC_OscConfig+0x508>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_RCC_OscConfig+0x508>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266c:	f7ff fab6 	bl	8001bdc <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7ff fab2 	bl	8001bdc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1b2      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_RCC_OscConfig+0x508>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <HAL_RCC_OscConfig+0x4d8>
 800269a:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026aa:	e029      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d115      	bne.n	80026e0 <HAL_RCC_OscConfig+0x50c>
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	4a03      	ldr	r2, [pc, #12]	@ (80026d8 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d4:	e014      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
 80026e0:	4b9a      	ldr	r3, [pc, #616]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a99      	ldr	r2, [pc, #612]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f0:	4b96      	ldr	r3, [pc, #600]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f6:	4a95      	ldr	r2, [pc, #596]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d016      	beq.n	8002736 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7ff fa68 	bl	8001bdc <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7ff fa64 	bl	8001bdc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e162      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	4b89      	ldr	r3, [pc, #548]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ed      	beq.n	8002710 <HAL_RCC_OscConfig+0x53c>
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7ff fa51 	bl	8001bdc <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7ff fa4d 	bl	8001bdc <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e14b      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002754:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ed      	bne.n	800273e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002762:	7ffb      	ldrb	r3, [r7, #31]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b78      	ldr	r3, [pc, #480]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	4a77      	ldr	r2, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03c      	beq.n	80027fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002788:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800278a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278e:	4a6f      	ldr	r2, [pc, #444]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff fa20 	bl	8001bdc <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a0:	f7ff fa1c 	bl	8001bdc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e11c      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027b2:	4b66      	ldr	r3, [pc, #408]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80027b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <HAL_RCC_OscConfig+0x5cc>
 80027c0:	e01b      	b.n	80027fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027c2:	4b62      	ldr	r3, [pc, #392]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80027c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c8:	4a60      	ldr	r2, [pc, #384]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7ff fa03 	bl	8001bdc <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027da:	f7ff f9ff 	bl	8001bdc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0ff      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ec:	4b57      	ldr	r3, [pc, #348]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80027ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ef      	bne.n	80027da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80f3 	beq.w	80029ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	2b02      	cmp	r3, #2
 800280a:	f040 80c9 	bne.w	80029a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800280e:	4b4f      	ldr	r3, [pc, #316]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0203 	and.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	429a      	cmp	r2, r3
 8002820:	d12c      	bne.n	800287c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	3b01      	subs	r3, #1
 800282e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d123      	bne.n	800287c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d11b      	bne.n	800287c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d113      	bne.n	800287c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d109      	bne.n	800287c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d06b      	beq.n	8002954 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d062      	beq.n	8002948 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002882:	4b32      	ldr	r3, [pc, #200]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0ac      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2d      	ldr	r2, [pc, #180]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800289e:	f7ff f99d 	bl	8001bdc <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff f999 	bl	8001bdc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e099      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_RCC_OscConfig+0x77c>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028d4:	3a01      	subs	r2, #1
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028de:	0212      	lsls	r2, r2, #8
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028f2:	0852      	lsrs	r2, r2, #1
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0652      	lsls	r2, r2, #25
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028fe:	06d2      	lsls	r2, r2, #27
 8002900:	430a      	orrs	r2, r1
 8002902:	4912      	ldr	r1, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002904:	4313      	orrs	r3, r2
 8002906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0f      	ldr	r2, [pc, #60]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002914:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002920:	f7ff f95c 	bl	8001bdc <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f958 	bl	8001bdc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e058      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_RCC_OscConfig+0x778>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002946:	e050      	b.n	80029ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04f      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
 800294c:	40021000 	.word	0x40021000
 8002950:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d144      	bne.n	80029ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002978:	f7ff f930 	bl	8001bdc <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff f92c 	bl	8001bdc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e02c      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x7ac>
 800299e:	e024      	b.n	80029ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d01f      	beq.n	80029e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 80029ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7ff f913 	bl	8001bdc <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7ff f90f 	bl	8001bdc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00f      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4905      	ldr	r1, [pc, #20]	@ (80029f4 <HAL_RCC_OscConfig+0x820>)
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_OscConfig+0x824>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e001      	b.n	80029ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	feeefffc 	.word	0xfeeefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0e7      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b75      	ldr	r3, [pc, #468]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4970      	ldr	r1, [pc, #448]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cf      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d908      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b63      	ldr	r3, [pc, #396]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4960      	ldr	r1, [pc, #384]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04c      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4b5a      	ldr	r3, [pc, #360]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0a6      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	4b54      	ldr	r3, [pc, #336]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e09a      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08e      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e086      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4943      	ldr	r1, [pc, #268]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7ff f87a 	bl	8001bdc <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7ff f876 	bl	8001bdc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e06e      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b3a      	ldr	r3, [pc, #232]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d208      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b2e      	ldr	r3, [pc, #184]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	492b      	ldr	r1, [pc, #172]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b42:	4b29      	ldr	r3, [pc, #164]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d210      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b50:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0207 	bic.w	r2, r3, #7
 8002b58:	4923      	ldr	r1, [pc, #140]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b60:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e036      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4918      	ldr	r1, [pc, #96]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4910      	ldr	r1, [pc, #64]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb0:	f000 f824 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	490b      	ldr	r1, [pc, #44]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	4a09      	ldr	r2, [pc, #36]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ffb1 	bl	8001b3c <HAL_InitTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bde:	7afb      	ldrb	r3, [r7, #11]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08004484 	.word	0x08004484
 8002bf4:	200028a0 	.word	0x200028a0
 8002bf8:	200028a4 	.word	0x200028a4

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d11e      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c30:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e005      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c58:	4a2b      	ldr	r2, [pc, #172]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e004      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c80:	4b23      	ldr	r3, [pc, #140]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d134      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ca0:	e005      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca4:	617b      	str	r3, [r7, #20]
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002caa:	617b      	str	r3, [r7, #20]
      break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	617b      	str	r3, [r7, #20]
      break;
 8002cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	fb03 f202 	mul.w	r2, r3, r2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0e5b      	lsrs	r3, r3, #25
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08004494 	.word	0x08004494
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

08002d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d20:	4b2a      	ldr	r3, [pc, #168]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d2c:	f7ff f9ee 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002d30:	6178      	str	r0, [r7, #20]
 8002d32:	e014      	b.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d40:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d4c:	f7ff f9de 	bl	800210c <HAL_PWREx_GetVoltageRange>
 8002d50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d64:	d10b      	bne.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b80      	cmp	r3, #128	@ 0x80
 8002d6a:	d919      	bls.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d70:	d902      	bls.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d72:	2302      	movs	r3, #2
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e013      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d78:	2301      	movs	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e010      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b80      	cmp	r3, #128	@ 0x80
 8002d82:	d902      	bls.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d84:	2303      	movs	r3, #3
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e00a      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d102      	bne.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d90:	2302      	movs	r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e004      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b70      	cmp	r3, #112	@ 0x70
 8002d9a:	d101      	bne.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 0207 	bic.w	r2, r3, #7
 8002da8:	4909      	ldr	r1, [pc, #36]	@ (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db0:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40022000 	.word	0x40022000

08002dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e095      	b.n	8002f12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df6:	d009      	beq.n	8002e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
 8002dfe:	e005      	b.n	8002e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fdc2 	bl	80019b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e4c:	d902      	bls.n	8002e54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e002      	b.n	8002e5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e62:	d007      	beq.n	8002e74 <HAL_SPI_Init+0xa0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	ea42 0103 	orr.w	r1, r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0204 	and.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ef0:	ea42 0103 	orr.w	r1, r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b088      	sub	sp, #32
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_SPI_Transmit+0x22>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e15f      	b.n	80031fc <HAL_SPI_Transmit+0x2e2>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f44:	f7fe fe4a 	bl	8001bdc <HAL_GetTick>
 8002f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f5e:	e148      	b.n	80031f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_Transmit+0x52>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f70:	e13f      	b.n	80031f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fbc:	d10f      	bne.n	8002fde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d007      	beq.n	8002ffc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003004:	d94f      	bls.n	80030a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Transmit+0xfa>
 800300e:	8afb      	ldrh	r3, [r7, #22]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d142      	bne.n	800309a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003038:	e02f      	b.n	800309a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d112      	bne.n	800306e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800306c:	e015      	b.n	800309a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306e:	f7fe fdb5 	bl	8001bdc <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_Transmit+0x16c>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit+0x172>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003098:	e0ab      	b.n	80031f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ca      	bne.n	800303a <HAL_SPI_Transmit+0x120>
 80030a4:	e080      	b.n	80031a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Transmit+0x19a>
 80030ae:	8afb      	ldrh	r3, [r7, #22]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d174      	bne.n	800319e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d912      	bls.n	80030e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b02      	subs	r3, #2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e2:	e05c      	b.n	800319e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800310a:	e048      	b.n	800319e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d12b      	bne.n	8003172 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d912      	bls.n	800314a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b02      	subs	r3, #2
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003148:	e029      	b.n	800319e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003170:	e015      	b.n	800319e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003172:	f7fe fd33 	bl	8001bdc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d803      	bhi.n	800318a <HAL_SPI_Transmit+0x270>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d102      	bne.n	8003190 <HAL_SPI_Transmit+0x276>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800319c:	e029      	b.n	80031f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1b1      	bne.n	800310c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f947 	bl	8003440 <SPI_EndRxTxTransaction>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e003      	b.n	80031f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003214:	f7fe fce2 	bl	8001bdc <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003224:	f7fe fcda 	bl	8001bdc <HAL_GetTick>
 8003228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	015b      	lsls	r3, r3, #5
 8003230:	0d1b      	lsrs	r3, r3, #20
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	e054      	b.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d050      	beq.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003244:	f7fe fcca 	bl	8001bdc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d902      	bls.n	800325a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003272:	d111      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327c:	d004      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003286:	d107      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a0:	d10f      	bne.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e017      	b.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d19b      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200028a0 	.word	0x200028a0

08003314 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003326:	f7fe fc59 	bl	8001bdc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4413      	add	r3, r2
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003336:	f7fe fc51 	bl	8001bdc <HAL_GetTick>
 800333a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003344:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00da      	lsls	r2, r3, #3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	0d1b      	lsrs	r3, r3, #20
 8003354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800335c:	e060      	b.n	8003420 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003364:	d107      	bne.n	8003376 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003374:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d050      	beq.n	8003420 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800337e:	f7fe fc2d 	bl	8001bdc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338a:	429a      	cmp	r2, r3
 800338c:	d902      	bls.n	8003394 <SPI_WaitFifoStateUntilTimeout+0x80>
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	2b00      	cmp	r3, #0
 8003392:	d13d      	bne.n	8003410 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ac:	d111      	bne.n	80033d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b6:	d004      	beq.n	80033c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c0:	d107      	bne.n	80033d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033da:	d10f      	bne.n	80033fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e010      	b.n	8003432 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	3b01      	subs	r3, #1
 800341e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d196      	bne.n	800335e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	@ 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200028a0 	.word	0x200028a0

08003440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff ff5b 	bl	8003314 <SPI_WaitFifoStateUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e027      	b.n	80034c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2200      	movs	r2, #0
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fec0 	bl	8003204 <SPI_WaitFlagStateUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e014      	b.n	80034c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff ff34 	bl	8003314 <SPI_WaitFifoStateUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e000      	b.n	80034c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <pow>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	ed2d 8b02 	vpush	{d8}
 80034d2:	eeb0 8a40 	vmov.f32	s16, s0
 80034d6:	eef0 8a60 	vmov.f32	s17, s1
 80034da:	ec55 4b11 	vmov	r4, r5, d1
 80034de:	f000 f977 	bl	80037d0 <__ieee754_pow>
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	ec57 6b10 	vmov	r6, r7, d0
 80034ee:	f7fd fac5 	bl	8000a7c <__aeabi_dcmpun>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d13b      	bne.n	800356e <pow+0xa2>
 80034f6:	ec51 0b18 	vmov	r0, r1, d8
 80034fa:	2200      	movs	r2, #0
 80034fc:	2300      	movs	r3, #0
 80034fe:	f7fd fa8b 	bl	8000a18 <__aeabi_dcmpeq>
 8003502:	b1b8      	cbz	r0, 8003534 <pow+0x68>
 8003504:	2200      	movs	r2, #0
 8003506:	2300      	movs	r3, #0
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7fd fa84 	bl	8000a18 <__aeabi_dcmpeq>
 8003510:	2800      	cmp	r0, #0
 8003512:	d146      	bne.n	80035a2 <pow+0xd6>
 8003514:	ec45 4b10 	vmov	d0, r4, r5
 8003518:	f000 f874 	bl	8003604 <finite>
 800351c:	b338      	cbz	r0, 800356e <pow+0xa2>
 800351e:	2200      	movs	r2, #0
 8003520:	2300      	movs	r3, #0
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fd fa81 	bl	8000a2c <__aeabi_dcmplt>
 800352a:	b300      	cbz	r0, 800356e <pow+0xa2>
 800352c:	f000 ff60 	bl	80043f0 <__errno>
 8003530:	2322      	movs	r3, #34	@ 0x22
 8003532:	e01b      	b.n	800356c <pow+0xa0>
 8003534:	ec47 6b10 	vmov	d0, r6, r7
 8003538:	f000 f864 	bl	8003604 <finite>
 800353c:	b9e0      	cbnz	r0, 8003578 <pow+0xac>
 800353e:	eeb0 0a48 	vmov.f32	s0, s16
 8003542:	eef0 0a68 	vmov.f32	s1, s17
 8003546:	f000 f85d 	bl	8003604 <finite>
 800354a:	b1a8      	cbz	r0, 8003578 <pow+0xac>
 800354c:	ec45 4b10 	vmov	d0, r4, r5
 8003550:	f000 f858 	bl	8003604 <finite>
 8003554:	b180      	cbz	r0, 8003578 <pow+0xac>
 8003556:	4632      	mov	r2, r6
 8003558:	463b      	mov	r3, r7
 800355a:	4630      	mov	r0, r6
 800355c:	4639      	mov	r1, r7
 800355e:	f7fd fa8d 	bl	8000a7c <__aeabi_dcmpun>
 8003562:	2800      	cmp	r0, #0
 8003564:	d0e2      	beq.n	800352c <pow+0x60>
 8003566:	f000 ff43 	bl	80043f0 <__errno>
 800356a:	2321      	movs	r3, #33	@ 0x21
 800356c:	6003      	str	r3, [r0, #0]
 800356e:	ecbd 8b02 	vpop	{d8}
 8003572:	ec47 6b10 	vmov	d0, r6, r7
 8003576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003578:	2200      	movs	r2, #0
 800357a:	2300      	movs	r3, #0
 800357c:	4630      	mov	r0, r6
 800357e:	4639      	mov	r1, r7
 8003580:	f7fd fa4a 	bl	8000a18 <__aeabi_dcmpeq>
 8003584:	2800      	cmp	r0, #0
 8003586:	d0f2      	beq.n	800356e <pow+0xa2>
 8003588:	eeb0 0a48 	vmov.f32	s0, s16
 800358c:	eef0 0a68 	vmov.f32	s1, s17
 8003590:	f000 f838 	bl	8003604 <finite>
 8003594:	2800      	cmp	r0, #0
 8003596:	d0ea      	beq.n	800356e <pow+0xa2>
 8003598:	ec45 4b10 	vmov	d0, r4, r5
 800359c:	f000 f832 	bl	8003604 <finite>
 80035a0:	e7c3      	b.n	800352a <pow+0x5e>
 80035a2:	4f01      	ldr	r7, [pc, #4]	@ (80035a8 <pow+0xdc>)
 80035a4:	2600      	movs	r6, #0
 80035a6:	e7e2      	b.n	800356e <pow+0xa2>
 80035a8:	3ff00000 	.word	0x3ff00000

080035ac <sqrt>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	ed2d 8b02 	vpush	{d8}
 80035b2:	ec55 4b10 	vmov	r4, r5, d0
 80035b6:	f000 f831 	bl	800361c <__ieee754_sqrt>
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	4620      	mov	r0, r4
 80035c0:	4629      	mov	r1, r5
 80035c2:	eeb0 8a40 	vmov.f32	s16, s0
 80035c6:	eef0 8a60 	vmov.f32	s17, s1
 80035ca:	f7fd fa57 	bl	8000a7c <__aeabi_dcmpun>
 80035ce:	b990      	cbnz	r0, 80035f6 <sqrt+0x4a>
 80035d0:	2200      	movs	r2, #0
 80035d2:	2300      	movs	r3, #0
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fd fa28 	bl	8000a2c <__aeabi_dcmplt>
 80035dc:	b158      	cbz	r0, 80035f6 <sqrt+0x4a>
 80035de:	f000 ff07 	bl	80043f0 <__errno>
 80035e2:	2321      	movs	r3, #33	@ 0x21
 80035e4:	6003      	str	r3, [r0, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2300      	movs	r3, #0
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd f8d5 	bl	800079c <__aeabi_ddiv>
 80035f2:	ec41 0b18 	vmov	d8, r0, r1
 80035f6:	eeb0 0a48 	vmov.f32	s0, s16
 80035fa:	eef0 0a68 	vmov.f32	s1, s17
 80035fe:	ecbd 8b02 	vpop	{d8}
 8003602:	bd38      	pop	{r3, r4, r5, pc}

08003604 <finite>:
 8003604:	b082      	sub	sp, #8
 8003606:	ed8d 0b00 	vstr	d0, [sp]
 800360a:	9801      	ldr	r0, [sp, #4]
 800360c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003610:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003614:	0fc0      	lsrs	r0, r0, #31
 8003616:	b002      	add	sp, #8
 8003618:	4770      	bx	lr
	...

0800361c <__ieee754_sqrt>:
 800361c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	4a68      	ldr	r2, [pc, #416]	@ (80037c4 <__ieee754_sqrt+0x1a8>)
 8003622:	ec55 4b10 	vmov	r4, r5, d0
 8003626:	43aa      	bics	r2, r5
 8003628:	462b      	mov	r3, r5
 800362a:	4621      	mov	r1, r4
 800362c:	d110      	bne.n	8003650 <__ieee754_sqrt+0x34>
 800362e:	4622      	mov	r2, r4
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fc ff88 	bl	8000548 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fc fdcc 	bl	80001dc <__adddf3>
 8003644:	4604      	mov	r4, r0
 8003646:	460d      	mov	r5, r1
 8003648:	ec45 4b10 	vmov	d0, r4, r5
 800364c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003650:	2d00      	cmp	r5, #0
 8003652:	dc0e      	bgt.n	8003672 <__ieee754_sqrt+0x56>
 8003654:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003658:	4322      	orrs	r2, r4
 800365a:	d0f5      	beq.n	8003648 <__ieee754_sqrt+0x2c>
 800365c:	b19d      	cbz	r5, 8003686 <__ieee754_sqrt+0x6a>
 800365e:	4622      	mov	r2, r4
 8003660:	4620      	mov	r0, r4
 8003662:	4629      	mov	r1, r5
 8003664:	f7fc fdb8 	bl	80001d8 <__aeabi_dsub>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	f7fd f896 	bl	800079c <__aeabi_ddiv>
 8003670:	e7e8      	b.n	8003644 <__ieee754_sqrt+0x28>
 8003672:	152a      	asrs	r2, r5, #20
 8003674:	d115      	bne.n	80036a2 <__ieee754_sqrt+0x86>
 8003676:	2000      	movs	r0, #0
 8003678:	e009      	b.n	800368e <__ieee754_sqrt+0x72>
 800367a:	0acb      	lsrs	r3, r1, #11
 800367c:	3a15      	subs	r2, #21
 800367e:	0549      	lsls	r1, r1, #21
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0fa      	beq.n	800367a <__ieee754_sqrt+0x5e>
 8003684:	e7f7      	b.n	8003676 <__ieee754_sqrt+0x5a>
 8003686:	462a      	mov	r2, r5
 8003688:	e7fa      	b.n	8003680 <__ieee754_sqrt+0x64>
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	3001      	adds	r0, #1
 800368e:	02dc      	lsls	r4, r3, #11
 8003690:	d5fb      	bpl.n	800368a <__ieee754_sqrt+0x6e>
 8003692:	1e44      	subs	r4, r0, #1
 8003694:	1b12      	subs	r2, r2, r4
 8003696:	f1c0 0420 	rsb	r4, r0, #32
 800369a:	fa21 f404 	lsr.w	r4, r1, r4
 800369e:	4323      	orrs	r3, r4
 80036a0:	4081      	lsls	r1, r0
 80036a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ae:	07d2      	lsls	r2, r2, #31
 80036b0:	bf5c      	itt	pl
 80036b2:	005b      	lslpl	r3, r3, #1
 80036b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80036b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036bc:	bf58      	it	pl
 80036be:	0049      	lslpl	r1, r1, #1
 80036c0:	2600      	movs	r6, #0
 80036c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80036c6:	106d      	asrs	r5, r5, #1
 80036c8:	0049      	lsls	r1, r1, #1
 80036ca:	2016      	movs	r0, #22
 80036cc:	4632      	mov	r2, r6
 80036ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80036d2:	1917      	adds	r7, r2, r4
 80036d4:	429f      	cmp	r7, r3
 80036d6:	bfde      	ittt	le
 80036d8:	193a      	addle	r2, r7, r4
 80036da:	1bdb      	suble	r3, r3, r7
 80036dc:	1936      	addle	r6, r6, r4
 80036de:	0fcf      	lsrs	r7, r1, #31
 80036e0:	3801      	subs	r0, #1
 80036e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80036e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80036ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80036ee:	d1f0      	bne.n	80036d2 <__ieee754_sqrt+0xb6>
 80036f0:	4604      	mov	r4, r0
 80036f2:	2720      	movs	r7, #32
 80036f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80036f8:	429a      	cmp	r2, r3
 80036fa:	eb00 0e0c 	add.w	lr, r0, ip
 80036fe:	db02      	blt.n	8003706 <__ieee754_sqrt+0xea>
 8003700:	d113      	bne.n	800372a <__ieee754_sqrt+0x10e>
 8003702:	458e      	cmp	lr, r1
 8003704:	d811      	bhi.n	800372a <__ieee754_sqrt+0x10e>
 8003706:	f1be 0f00 	cmp.w	lr, #0
 800370a:	eb0e 000c 	add.w	r0, lr, ip
 800370e:	da42      	bge.n	8003796 <__ieee754_sqrt+0x17a>
 8003710:	2800      	cmp	r0, #0
 8003712:	db40      	blt.n	8003796 <__ieee754_sqrt+0x17a>
 8003714:	f102 0801 	add.w	r8, r2, #1
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	458e      	cmp	lr, r1
 800371c:	bf88      	it	hi
 800371e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003722:	eba1 010e 	sub.w	r1, r1, lr
 8003726:	4464      	add	r4, ip
 8003728:	4642      	mov	r2, r8
 800372a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800372e:	3f01      	subs	r7, #1
 8003730:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003734:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003738:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800373c:	d1dc      	bne.n	80036f8 <__ieee754_sqrt+0xdc>
 800373e:	4319      	orrs	r1, r3
 8003740:	d01b      	beq.n	800377a <__ieee754_sqrt+0x15e>
 8003742:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80037c8 <__ieee754_sqrt+0x1ac>
 8003746:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80037cc <__ieee754_sqrt+0x1b0>
 800374a:	e9da 0100 	ldrd	r0, r1, [sl]
 800374e:	e9db 2300 	ldrd	r2, r3, [fp]
 8003752:	f7fc fd41 	bl	80001d8 <__aeabi_dsub>
 8003756:	e9da 8900 	ldrd	r8, r9, [sl]
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4640      	mov	r0, r8
 8003760:	4649      	mov	r1, r9
 8003762:	f7fd f96d 	bl	8000a40 <__aeabi_dcmple>
 8003766:	b140      	cbz	r0, 800377a <__ieee754_sqrt+0x15e>
 8003768:	f1b4 3fff 	cmp.w	r4, #4294967295
 800376c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003770:	e9db 2300 	ldrd	r2, r3, [fp]
 8003774:	d111      	bne.n	800379a <__ieee754_sqrt+0x17e>
 8003776:	3601      	adds	r6, #1
 8003778:	463c      	mov	r4, r7
 800377a:	1072      	asrs	r2, r6, #1
 800377c:	0863      	lsrs	r3, r4, #1
 800377e:	07f1      	lsls	r1, r6, #31
 8003780:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003784:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003788:	bf48      	it	mi
 800378a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800378e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8003792:	4618      	mov	r0, r3
 8003794:	e756      	b.n	8003644 <__ieee754_sqrt+0x28>
 8003796:	4690      	mov	r8, r2
 8003798:	e7be      	b.n	8003718 <__ieee754_sqrt+0xfc>
 800379a:	f7fc fd1f 	bl	80001dc <__adddf3>
 800379e:	e9da 8900 	ldrd	r8, r9, [sl]
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4640      	mov	r0, r8
 80037a8:	4649      	mov	r1, r9
 80037aa:	f7fd f93f 	bl	8000a2c <__aeabi_dcmplt>
 80037ae:	b120      	cbz	r0, 80037ba <__ieee754_sqrt+0x19e>
 80037b0:	1ca0      	adds	r0, r4, #2
 80037b2:	bf08      	it	eq
 80037b4:	3601      	addeq	r6, #1
 80037b6:	3402      	adds	r4, #2
 80037b8:	e7df      	b.n	800377a <__ieee754_sqrt+0x15e>
 80037ba:	1c63      	adds	r3, r4, #1
 80037bc:	f023 0401 	bic.w	r4, r3, #1
 80037c0:	e7db      	b.n	800377a <__ieee754_sqrt+0x15e>
 80037c2:	bf00      	nop
 80037c4:	7ff00000 	.word	0x7ff00000
 80037c8:	200028b8 	.word	0x200028b8
 80037cc:	200028b0 	.word	0x200028b0

080037d0 <__ieee754_pow>:
 80037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d4:	b091      	sub	sp, #68	@ 0x44
 80037d6:	ed8d 1b00 	vstr	d1, [sp]
 80037da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80037de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80037e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80037e6:	ec57 6b10 	vmov	r6, r7, d0
 80037ea:	d113      	bne.n	8003814 <__ieee754_pow+0x44>
 80037ec:	19b3      	adds	r3, r6, r6
 80037ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80037f2:	4152      	adcs	r2, r2
 80037f4:	4298      	cmp	r0, r3
 80037f6:	4b98      	ldr	r3, [pc, #608]	@ (8003a58 <__ieee754_pow+0x288>)
 80037f8:	4193      	sbcs	r3, r2
 80037fa:	f080 84ea 	bcs.w	80041d2 <__ieee754_pow+0xa02>
 80037fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003802:	4630      	mov	r0, r6
 8003804:	4639      	mov	r1, r7
 8003806:	f7fc fce9 	bl	80001dc <__adddf3>
 800380a:	ec41 0b10 	vmov	d0, r0, r1
 800380e:	b011      	add	sp, #68	@ 0x44
 8003810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003814:	4a91      	ldr	r2, [pc, #580]	@ (8003a5c <__ieee754_pow+0x28c>)
 8003816:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800381a:	4590      	cmp	r8, r2
 800381c:	463d      	mov	r5, r7
 800381e:	4633      	mov	r3, r6
 8003820:	d806      	bhi.n	8003830 <__ieee754_pow+0x60>
 8003822:	d101      	bne.n	8003828 <__ieee754_pow+0x58>
 8003824:	2e00      	cmp	r6, #0
 8003826:	d1ea      	bne.n	80037fe <__ieee754_pow+0x2e>
 8003828:	4592      	cmp	sl, r2
 800382a:	d801      	bhi.n	8003830 <__ieee754_pow+0x60>
 800382c:	d10e      	bne.n	800384c <__ieee754_pow+0x7c>
 800382e:	b169      	cbz	r1, 800384c <__ieee754_pow+0x7c>
 8003830:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003834:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003838:	431d      	orrs	r5, r3
 800383a:	d1e0      	bne.n	80037fe <__ieee754_pow+0x2e>
 800383c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003840:	18db      	adds	r3, r3, r3
 8003842:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003846:	4152      	adcs	r2, r2
 8003848:	429d      	cmp	r5, r3
 800384a:	e7d4      	b.n	80037f6 <__ieee754_pow+0x26>
 800384c:	2d00      	cmp	r5, #0
 800384e:	46c3      	mov	fp, r8
 8003850:	da3a      	bge.n	80038c8 <__ieee754_pow+0xf8>
 8003852:	4a83      	ldr	r2, [pc, #524]	@ (8003a60 <__ieee754_pow+0x290>)
 8003854:	4592      	cmp	sl, r2
 8003856:	d84d      	bhi.n	80038f4 <__ieee754_pow+0x124>
 8003858:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800385c:	4592      	cmp	sl, r2
 800385e:	f240 84c7 	bls.w	80041f0 <__ieee754_pow+0xa20>
 8003862:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003866:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800386a:	2a14      	cmp	r2, #20
 800386c:	dd0f      	ble.n	800388e <__ieee754_pow+0xbe>
 800386e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003872:	fa21 f402 	lsr.w	r4, r1, r2
 8003876:	fa04 f202 	lsl.w	r2, r4, r2
 800387a:	428a      	cmp	r2, r1
 800387c:	f040 84b8 	bne.w	80041f0 <__ieee754_pow+0xa20>
 8003880:	f004 0401 	and.w	r4, r4, #1
 8003884:	f1c4 0402 	rsb	r4, r4, #2
 8003888:	2900      	cmp	r1, #0
 800388a:	d158      	bne.n	800393e <__ieee754_pow+0x16e>
 800388c:	e00e      	b.n	80038ac <__ieee754_pow+0xdc>
 800388e:	2900      	cmp	r1, #0
 8003890:	d154      	bne.n	800393c <__ieee754_pow+0x16c>
 8003892:	f1c2 0214 	rsb	r2, r2, #20
 8003896:	fa4a f402 	asr.w	r4, sl, r2
 800389a:	fa04 f202 	lsl.w	r2, r4, r2
 800389e:	4552      	cmp	r2, sl
 80038a0:	f040 84a3 	bne.w	80041ea <__ieee754_pow+0xa1a>
 80038a4:	f004 0401 	and.w	r4, r4, #1
 80038a8:	f1c4 0402 	rsb	r4, r4, #2
 80038ac:	4a6d      	ldr	r2, [pc, #436]	@ (8003a64 <__ieee754_pow+0x294>)
 80038ae:	4592      	cmp	sl, r2
 80038b0:	d12e      	bne.n	8003910 <__ieee754_pow+0x140>
 80038b2:	f1b9 0f00 	cmp.w	r9, #0
 80038b6:	f280 8494 	bge.w	80041e2 <__ieee754_pow+0xa12>
 80038ba:	496a      	ldr	r1, [pc, #424]	@ (8003a64 <__ieee754_pow+0x294>)
 80038bc:	4632      	mov	r2, r6
 80038be:	463b      	mov	r3, r7
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fc ff6b 	bl	800079c <__aeabi_ddiv>
 80038c6:	e7a0      	b.n	800380a <__ieee754_pow+0x3a>
 80038c8:	2400      	movs	r4, #0
 80038ca:	bbc1      	cbnz	r1, 800393e <__ieee754_pow+0x16e>
 80038cc:	4a63      	ldr	r2, [pc, #396]	@ (8003a5c <__ieee754_pow+0x28c>)
 80038ce:	4592      	cmp	sl, r2
 80038d0:	d1ec      	bne.n	80038ac <__ieee754_pow+0xdc>
 80038d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80038d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80038da:	431a      	orrs	r2, r3
 80038dc:	f000 8479 	beq.w	80041d2 <__ieee754_pow+0xa02>
 80038e0:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <__ieee754_pow+0x298>)
 80038e2:	4598      	cmp	r8, r3
 80038e4:	d908      	bls.n	80038f8 <__ieee754_pow+0x128>
 80038e6:	f1b9 0f00 	cmp.w	r9, #0
 80038ea:	f2c0 8476 	blt.w	80041da <__ieee754_pow+0xa0a>
 80038ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038f2:	e78a      	b.n	800380a <__ieee754_pow+0x3a>
 80038f4:	2402      	movs	r4, #2
 80038f6:	e7e8      	b.n	80038ca <__ieee754_pow+0xfa>
 80038f8:	f1b9 0f00 	cmp.w	r9, #0
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	da81      	bge.n	800380a <__ieee754_pow+0x3a>
 8003906:	e9dd 0300 	ldrd	r0, r3, [sp]
 800390a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800390e:	e77c      	b.n	800380a <__ieee754_pow+0x3a>
 8003910:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003914:	d106      	bne.n	8003924 <__ieee754_pow+0x154>
 8003916:	4632      	mov	r2, r6
 8003918:	463b      	mov	r3, r7
 800391a:	4630      	mov	r0, r6
 800391c:	4639      	mov	r1, r7
 800391e:	f7fc fe13 	bl	8000548 <__aeabi_dmul>
 8003922:	e772      	b.n	800380a <__ieee754_pow+0x3a>
 8003924:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <__ieee754_pow+0x29c>)
 8003926:	4591      	cmp	r9, r2
 8003928:	d109      	bne.n	800393e <__ieee754_pow+0x16e>
 800392a:	2d00      	cmp	r5, #0
 800392c:	db07      	blt.n	800393e <__ieee754_pow+0x16e>
 800392e:	ec47 6b10 	vmov	d0, r6, r7
 8003932:	b011      	add	sp, #68	@ 0x44
 8003934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	f7ff be70 	b.w	800361c <__ieee754_sqrt>
 800393c:	2400      	movs	r4, #0
 800393e:	ec47 6b10 	vmov	d0, r6, r7
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	f000 fc88 	bl	8004258 <fabs>
 8003948:	9b02      	ldr	r3, [sp, #8]
 800394a:	ec51 0b10 	vmov	r0, r1, d0
 800394e:	bb53      	cbnz	r3, 80039a6 <__ieee754_pow+0x1d6>
 8003950:	4b44      	ldr	r3, [pc, #272]	@ (8003a64 <__ieee754_pow+0x294>)
 8003952:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003956:	429a      	cmp	r2, r3
 8003958:	d002      	beq.n	8003960 <__ieee754_pow+0x190>
 800395a:	f1b8 0f00 	cmp.w	r8, #0
 800395e:	d122      	bne.n	80039a6 <__ieee754_pow+0x1d6>
 8003960:	f1b9 0f00 	cmp.w	r9, #0
 8003964:	da05      	bge.n	8003972 <__ieee754_pow+0x1a2>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	2000      	movs	r0, #0
 800396c:	493d      	ldr	r1, [pc, #244]	@ (8003a64 <__ieee754_pow+0x294>)
 800396e:	f7fc ff15 	bl	800079c <__aeabi_ddiv>
 8003972:	2d00      	cmp	r5, #0
 8003974:	f6bf af49 	bge.w	800380a <__ieee754_pow+0x3a>
 8003978:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800397c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003980:	ea58 0804 	orrs.w	r8, r8, r4
 8003984:	d108      	bne.n	8003998 <__ieee754_pow+0x1c8>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7fc fc23 	bl	80001d8 <__aeabi_dsub>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e794      	b.n	80038c2 <__ieee754_pow+0xf2>
 8003998:	2c01      	cmp	r4, #1
 800399a:	f47f af36 	bne.w	800380a <__ieee754_pow+0x3a>
 800399e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80039a2:	4619      	mov	r1, r3
 80039a4:	e731      	b.n	800380a <__ieee754_pow+0x3a>
 80039a6:	0feb      	lsrs	r3, r5, #31
 80039a8:	3b01      	subs	r3, #1
 80039aa:	ea53 0204 	orrs.w	r2, r3, r4
 80039ae:	d102      	bne.n	80039b6 <__ieee754_pow+0x1e6>
 80039b0:	4632      	mov	r2, r6
 80039b2:	463b      	mov	r3, r7
 80039b4:	e7e9      	b.n	800398a <__ieee754_pow+0x1ba>
 80039b6:	3c01      	subs	r4, #1
 80039b8:	431c      	orrs	r4, r3
 80039ba:	d016      	beq.n	80039ea <__ieee754_pow+0x21a>
 80039bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003a48 <__ieee754_pow+0x278>
 80039c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80039c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039c8:	f240 8112 	bls.w	8003bf0 <__ieee754_pow+0x420>
 80039cc:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <__ieee754_pow+0x2a0>)
 80039ce:	459a      	cmp	sl, r3
 80039d0:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <__ieee754_pow+0x298>)
 80039d2:	d916      	bls.n	8003a02 <__ieee754_pow+0x232>
 80039d4:	4598      	cmp	r8, r3
 80039d6:	d80b      	bhi.n	80039f0 <__ieee754_pow+0x220>
 80039d8:	f1b9 0f00 	cmp.w	r9, #0
 80039dc:	da0b      	bge.n	80039f6 <__ieee754_pow+0x226>
 80039de:	2000      	movs	r0, #0
 80039e0:	b011      	add	sp, #68	@ 0x44
 80039e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e6:	f000 bcf3 	b.w	80043d0 <__math_oflow>
 80039ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003a50 <__ieee754_pow+0x280>
 80039ee:	e7e7      	b.n	80039c0 <__ieee754_pow+0x1f0>
 80039f0:	f1b9 0f00 	cmp.w	r9, #0
 80039f4:	dcf3      	bgt.n	80039de <__ieee754_pow+0x20e>
 80039f6:	2000      	movs	r0, #0
 80039f8:	b011      	add	sp, #68	@ 0x44
 80039fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fe:	f000 bcdf 	b.w	80043c0 <__math_uflow>
 8003a02:	4598      	cmp	r8, r3
 8003a04:	d20c      	bcs.n	8003a20 <__ieee754_pow+0x250>
 8003a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f7fd f80d 	bl	8000a2c <__aeabi_dcmplt>
 8003a12:	3800      	subs	r0, #0
 8003a14:	bf18      	it	ne
 8003a16:	2001      	movne	r0, #1
 8003a18:	f1b9 0f00 	cmp.w	r9, #0
 8003a1c:	daec      	bge.n	80039f8 <__ieee754_pow+0x228>
 8003a1e:	e7df      	b.n	80039e0 <__ieee754_pow+0x210>
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <__ieee754_pow+0x294>)
 8003a22:	4598      	cmp	r8, r3
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	d924      	bls.n	8003a74 <__ieee754_pow+0x2a4>
 8003a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f7fc fffc 	bl	8000a2c <__aeabi_dcmplt>
 8003a34:	3800      	subs	r0, #0
 8003a36:	bf18      	it	ne
 8003a38:	2001      	movne	r0, #1
 8003a3a:	f1b9 0f00 	cmp.w	r9, #0
 8003a3e:	dccf      	bgt.n	80039e0 <__ieee754_pow+0x210>
 8003a40:	e7da      	b.n	80039f8 <__ieee754_pow+0x228>
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	3ff00000 	.word	0x3ff00000
 8003a50:	00000000 	.word	0x00000000
 8003a54:	bff00000 	.word	0xbff00000
 8003a58:	fff00000 	.word	0xfff00000
 8003a5c:	7ff00000 	.word	0x7ff00000
 8003a60:	433fffff 	.word	0x433fffff
 8003a64:	3ff00000 	.word	0x3ff00000
 8003a68:	3fefffff 	.word	0x3fefffff
 8003a6c:	3fe00000 	.word	0x3fe00000
 8003a70:	43f00000 	.word	0x43f00000
 8003a74:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <__ieee754_pow+0x410>)
 8003a76:	f7fc fbaf 	bl	80001d8 <__aeabi_dsub>
 8003a7a:	a351      	add	r3, pc, #324	@ (adr r3, 8003bc0 <__ieee754_pow+0x3f0>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	4604      	mov	r4, r0
 8003a82:	460d      	mov	r5, r1
 8003a84:	f7fc fd60 	bl	8000548 <__aeabi_dmul>
 8003a88:	a34f      	add	r3, pc, #316	@ (adr r3, 8003bc8 <__ieee754_pow+0x3f8>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	4606      	mov	r6, r0
 8003a90:	460f      	mov	r7, r1
 8003a92:	4620      	mov	r0, r4
 8003a94:	4629      	mov	r1, r5
 8003a96:	f7fc fd57 	bl	8000548 <__aeabi_dmul>
 8003a9a:	4b52      	ldr	r3, [pc, #328]	@ (8003be4 <__ieee754_pow+0x414>)
 8003a9c:	4682      	mov	sl, r0
 8003a9e:	468b      	mov	fp, r1
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fc fd4f 	bl	8000548 <__aeabi_dmul>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	a148      	add	r1, pc, #288	@ (adr r1, 8003bd0 <__ieee754_pow+0x400>)
 8003ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ab4:	f7fc fb90 	bl	80001d8 <__aeabi_dsub>
 8003ab8:	4622      	mov	r2, r4
 8003aba:	462b      	mov	r3, r5
 8003abc:	f7fc fd44 	bl	8000548 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	4948      	ldr	r1, [pc, #288]	@ (8003be8 <__ieee754_pow+0x418>)
 8003ac8:	f7fc fb86 	bl	80001d8 <__aeabi_dsub>
 8003acc:	4622      	mov	r2, r4
 8003ace:	4680      	mov	r8, r0
 8003ad0:	4689      	mov	r9, r1
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fd36 	bl	8000548 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	f7fc fd30 	bl	8000548 <__aeabi_dmul>
 8003ae8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003bd8 <__ieee754_pow+0x408>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd2b 	bl	8000548 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4650      	mov	r0, sl
 8003af8:	4659      	mov	r1, fp
 8003afa:	f7fc fb6d 	bl	80001d8 <__aeabi_dsub>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4680      	mov	r8, r0
 8003b04:	4689      	mov	r9, r1
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	f7fc fb67 	bl	80001dc <__adddf3>
 8003b0e:	2400      	movs	r4, #0
 8003b10:	4632      	mov	r2, r6
 8003b12:	463b      	mov	r3, r7
 8003b14:	4620      	mov	r0, r4
 8003b16:	460d      	mov	r5, r1
 8003b18:	f7fc fb5e 	bl	80001d8 <__aeabi_dsub>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4640      	mov	r0, r8
 8003b22:	4649      	mov	r1, r9
 8003b24:	f7fc fb58 	bl	80001d8 <__aeabi_dsub>
 8003b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003b38:	4606      	mov	r6, r0
 8003b3a:	460f      	mov	r7, r1
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	465b      	mov	r3, fp
 8003b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b44:	f7fc fb48 	bl	80001d8 <__aeabi_dsub>
 8003b48:	4622      	mov	r2, r4
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	f7fc fcfc 	bl	8000548 <__aeabi_dmul>
 8003b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b54:	4680      	mov	r8, r0
 8003b56:	4689      	mov	r9, r1
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fc fcf4 	bl	8000548 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4640      	mov	r0, r8
 8003b66:	4649      	mov	r1, r9
 8003b68:	f7fc fb38 	bl	80001dc <__adddf3>
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	465b      	mov	r3, fp
 8003b70:	4606      	mov	r6, r0
 8003b72:	460f      	mov	r7, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fce6 	bl	8000548 <__aeabi_dmul>
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4680      	mov	r8, r0
 8003b82:	4689      	mov	r9, r1
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	f7fc fb28 	bl	80001dc <__adddf3>
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <__ieee754_pow+0x41c>)
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
 8003b94:	468a      	mov	sl, r1
 8003b96:	468b      	mov	fp, r1
 8003b98:	f340 82ef 	ble.w	800417a <__ieee754_pow+0x9aa>
 8003b9c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003ba0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003ba4:	4303      	orrs	r3, r0
 8003ba6:	f000 81e8 	beq.w	8003f7a <__ieee754_pow+0x7aa>
 8003baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f7fc ff3b 	bl	8000a2c <__aeabi_dcmplt>
 8003bb6:	3800      	subs	r0, #0
 8003bb8:	bf18      	it	ne
 8003bba:	2001      	movne	r0, #1
 8003bbc:	e710      	b.n	80039e0 <__ieee754_pow+0x210>
 8003bbe:	bf00      	nop
 8003bc0:	60000000 	.word	0x60000000
 8003bc4:	3ff71547 	.word	0x3ff71547
 8003bc8:	f85ddf44 	.word	0xf85ddf44
 8003bcc:	3e54ae0b 	.word	0x3e54ae0b
 8003bd0:	55555555 	.word	0x55555555
 8003bd4:	3fd55555 	.word	0x3fd55555
 8003bd8:	652b82fe 	.word	0x652b82fe
 8003bdc:	3ff71547 	.word	0x3ff71547
 8003be0:	3ff00000 	.word	0x3ff00000
 8003be4:	3fd00000 	.word	0x3fd00000
 8003be8:	3fe00000 	.word	0x3fe00000
 8003bec:	408fffff 	.word	0x408fffff
 8003bf0:	4bd5      	ldr	r3, [pc, #852]	@ (8003f48 <__ieee754_pow+0x778>)
 8003bf2:	402b      	ands	r3, r5
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	b92b      	cbnz	r3, 8003c04 <__ieee754_pow+0x434>
 8003bf8:	4bd4      	ldr	r3, [pc, #848]	@ (8003f4c <__ieee754_pow+0x77c>)
 8003bfa:	f7fc fca5 	bl	8000548 <__aeabi_dmul>
 8003bfe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003c02:	468b      	mov	fp, r1
 8003c04:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003c08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003c0c:	4413      	add	r3, r2
 8003c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c10:	4bcf      	ldr	r3, [pc, #828]	@ (8003f50 <__ieee754_pow+0x780>)
 8003c12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003c16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003c1a:	459b      	cmp	fp, r3
 8003c1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003c20:	dd08      	ble.n	8003c34 <__ieee754_pow+0x464>
 8003c22:	4bcc      	ldr	r3, [pc, #816]	@ (8003f54 <__ieee754_pow+0x784>)
 8003c24:	459b      	cmp	fp, r3
 8003c26:	f340 81a5 	ble.w	8003f74 <__ieee754_pow+0x7a4>
 8003c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003c34:	f04f 0a00 	mov.w	sl, #0
 8003c38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c3e:	4bc6      	ldr	r3, [pc, #792]	@ (8003f58 <__ieee754_pow+0x788>)
 8003c40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c44:	ed93 7b00 	vldr	d7, [r3]
 8003c48:	4629      	mov	r1, r5
 8003c4a:	ec53 2b17 	vmov	r2, r3, d7
 8003c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c56:	f7fc fabf 	bl	80001d8 <__aeabi_dsub>
 8003c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c5e:	4606      	mov	r6, r0
 8003c60:	460f      	mov	r7, r1
 8003c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c66:	f7fc fab9 	bl	80001dc <__adddf3>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	2000      	movs	r0, #0
 8003c70:	49ba      	ldr	r1, [pc, #744]	@ (8003f5c <__ieee754_pow+0x78c>)
 8003c72:	f7fc fd93 	bl	800079c <__aeabi_ddiv>
 8003c76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4630      	mov	r0, r6
 8003c80:	4639      	mov	r1, r7
 8003c82:	f7fc fc61 	bl	8000548 <__aeabi_dmul>
 8003c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003c8e:	106d      	asrs	r5, r5, #1
 8003c90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003c94:	f04f 0b00 	mov.w	fp, #0
 8003c98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003c9c:	4661      	mov	r1, ip
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003ca4:	4658      	mov	r0, fp
 8003ca6:	46e1      	mov	r9, ip
 8003ca8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	f7fc fc4a 	bl	8000548 <__aeabi_dmul>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4630      	mov	r0, r6
 8003cba:	4639      	mov	r1, r7
 8003cbc:	f7fc fa8c 	bl	80001d8 <__aeabi_dsub>
 8003cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	4620      	mov	r0, r4
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f7fc fa84 	bl	80001d8 <__aeabi_dsub>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003cd8:	f7fc fa7e 	bl	80001d8 <__aeabi_dsub>
 8003cdc:	465a      	mov	r2, fp
 8003cde:	464b      	mov	r3, r9
 8003ce0:	f7fc fc32 	bl	8000548 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4630      	mov	r0, r6
 8003cea:	4639      	mov	r1, r7
 8003cec:	f7fc fa74 	bl	80001d8 <__aeabi_dsub>
 8003cf0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003cf4:	f7fc fc28 	bl	8000548 <__aeabi_dmul>
 8003cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fc fc20 	bl	8000548 <__aeabi_dmul>
 8003d08:	a37d      	add	r3, pc, #500	@ (adr r3, 8003f00 <__ieee754_pow+0x730>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
 8003d12:	f7fc fc19 	bl	8000548 <__aeabi_dmul>
 8003d16:	a37c      	add	r3, pc, #496	@ (adr r3, 8003f08 <__ieee754_pow+0x738>)
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f7fc fa5e 	bl	80001dc <__adddf3>
 8003d20:	4622      	mov	r2, r4
 8003d22:	462b      	mov	r3, r5
 8003d24:	f7fc fc10 	bl	8000548 <__aeabi_dmul>
 8003d28:	a379      	add	r3, pc, #484	@ (adr r3, 8003f10 <__ieee754_pow+0x740>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc fa55 	bl	80001dc <__adddf3>
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f7fc fc07 	bl	8000548 <__aeabi_dmul>
 8003d3a:	a377      	add	r3, pc, #476	@ (adr r3, 8003f18 <__ieee754_pow+0x748>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fa4c 	bl	80001dc <__adddf3>
 8003d44:	4622      	mov	r2, r4
 8003d46:	462b      	mov	r3, r5
 8003d48:	f7fc fbfe 	bl	8000548 <__aeabi_dmul>
 8003d4c:	a374      	add	r3, pc, #464	@ (adr r3, 8003f20 <__ieee754_pow+0x750>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fa43 	bl	80001dc <__adddf3>
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f7fc fbf5 	bl	8000548 <__aeabi_dmul>
 8003d5e:	a372      	add	r3, pc, #456	@ (adr r3, 8003f28 <__ieee754_pow+0x758>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fa3a 	bl	80001dc <__adddf3>
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	460f      	mov	r7, r1
 8003d6e:	462b      	mov	r3, r5
 8003d70:	4620      	mov	r0, r4
 8003d72:	4629      	mov	r1, r5
 8003d74:	f7fc fbe8 	bl	8000548 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc fbe2 	bl	8000548 <__aeabi_dmul>
 8003d84:	465a      	mov	r2, fp
 8003d86:	4604      	mov	r4, r0
 8003d88:	460d      	mov	r5, r1
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d90:	f7fc fa24 	bl	80001dc <__adddf3>
 8003d94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d98:	f7fc fbd6 	bl	8000548 <__aeabi_dmul>
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	462b      	mov	r3, r5
 8003da0:	f7fc fa1c 	bl	80001dc <__adddf3>
 8003da4:	465a      	mov	r2, fp
 8003da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003daa:	464b      	mov	r3, r9
 8003dac:	4658      	mov	r0, fp
 8003dae:	4649      	mov	r1, r9
 8003db0:	f7fc fbca 	bl	8000548 <__aeabi_dmul>
 8003db4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <__ieee754_pow+0x790>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	4606      	mov	r6, r0
 8003dba:	460f      	mov	r7, r1
 8003dbc:	f7fc fa0e 	bl	80001dc <__adddf3>
 8003dc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dc4:	f7fc fa0a 	bl	80001dc <__adddf3>
 8003dc8:	46d8      	mov	r8, fp
 8003dca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003dce:	460d      	mov	r5, r1
 8003dd0:	465a      	mov	r2, fp
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003ddc:	f7fc fbb4 	bl	8000548 <__aeabi_dmul>
 8003de0:	465c      	mov	r4, fp
 8003de2:	4680      	mov	r8, r0
 8003de4:	4689      	mov	r9, r1
 8003de6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f60 <__ieee754_pow+0x790>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc f9f3 	bl	80001d8 <__aeabi_dsub>
 8003df2:	4632      	mov	r2, r6
 8003df4:	463b      	mov	r3, r7
 8003df6:	f7fc f9ef 	bl	80001d8 <__aeabi_dsub>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e02:	f7fc f9e9 	bl	80001d8 <__aeabi_dsub>
 8003e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e0a:	f7fc fb9d 	bl	8000548 <__aeabi_dmul>
 8003e0e:	4622      	mov	r2, r4
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	462b      	mov	r3, r5
 8003e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e1a:	f7fc fb95 	bl	8000548 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4630      	mov	r0, r6
 8003e24:	4639      	mov	r1, r7
 8003e26:	f7fc f9d9 	bl	80001dc <__adddf3>
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4640      	mov	r0, r8
 8003e34:	4649      	mov	r1, r9
 8003e36:	f7fc f9d1 	bl	80001dc <__adddf3>
 8003e3a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003e3e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003f30 <__ieee754_pow+0x760>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	4658      	mov	r0, fp
 8003e46:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	f7fc fb7c 	bl	8000548 <__aeabi_dmul>
 8003e50:	465c      	mov	r4, fp
 8003e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e56:	4642      	mov	r2, r8
 8003e58:	464b      	mov	r3, r9
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc f9bb 	bl	80001d8 <__aeabi_dsub>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4630      	mov	r0, r6
 8003e68:	4639      	mov	r1, r7
 8003e6a:	f7fc f9b5 	bl	80001d8 <__aeabi_dsub>
 8003e6e:	a332      	add	r3, pc, #200	@ (adr r3, 8003f38 <__ieee754_pow+0x768>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc fb68 	bl	8000548 <__aeabi_dmul>
 8003e78:	a331      	add	r3, pc, #196	@ (adr r3, 8003f40 <__ieee754_pow+0x770>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460f      	mov	r7, r1
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4630      	mov	r0, r6
 8003e90:	4639      	mov	r1, r7
 8003e92:	f7fc f9a3 	bl	80001dc <__adddf3>
 8003e96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003e98:	4b32      	ldr	r3, [pc, #200]	@ (8003f64 <__ieee754_pow+0x794>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc f99c 	bl	80001dc <__adddf3>
 8003ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ea8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003eaa:	f7fc fae3 	bl	8000474 <__aeabi_i2d>
 8003eae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <__ieee754_pow+0x798>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003eb8:	4606      	mov	r6, r0
 8003eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ebe:	460f      	mov	r7, r1
 8003ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ec4:	f7fc f98a 	bl	80001dc <__adddf3>
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	f7fc f986 	bl	80001dc <__adddf3>
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	f7fc f982 	bl	80001dc <__adddf3>
 8003ed8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8003edc:	4632      	mov	r2, r6
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4658      	mov	r0, fp
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	f7fc f978 	bl	80001d8 <__aeabi_dsub>
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	f7fc f974 	bl	80001d8 <__aeabi_dsub>
 8003ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ef4:	f7fc f970 	bl	80001d8 <__aeabi_dsub>
 8003ef8:	465c      	mov	r4, fp
 8003efa:	4602      	mov	r2, r0
 8003efc:	e036      	b.n	8003f6c <__ieee754_pow+0x79c>
 8003efe:	bf00      	nop
 8003f00:	4a454eef 	.word	0x4a454eef
 8003f04:	3fca7e28 	.word	0x3fca7e28
 8003f08:	93c9db65 	.word	0x93c9db65
 8003f0c:	3fcd864a 	.word	0x3fcd864a
 8003f10:	a91d4101 	.word	0xa91d4101
 8003f14:	3fd17460 	.word	0x3fd17460
 8003f18:	518f264d 	.word	0x518f264d
 8003f1c:	3fd55555 	.word	0x3fd55555
 8003f20:	db6fabff 	.word	0xdb6fabff
 8003f24:	3fdb6db6 	.word	0x3fdb6db6
 8003f28:	33333303 	.word	0x33333303
 8003f2c:	3fe33333 	.word	0x3fe33333
 8003f30:	e0000000 	.word	0xe0000000
 8003f34:	3feec709 	.word	0x3feec709
 8003f38:	dc3a03fd 	.word	0xdc3a03fd
 8003f3c:	3feec709 	.word	0x3feec709
 8003f40:	145b01f5 	.word	0x145b01f5
 8003f44:	be3e2fe0 	.word	0xbe3e2fe0
 8003f48:	7ff00000 	.word	0x7ff00000
 8003f4c:	43400000 	.word	0x43400000
 8003f50:	0003988e 	.word	0x0003988e
 8003f54:	000bb679 	.word	0x000bb679
 8003f58:	080044e8 	.word	0x080044e8
 8003f5c:	3ff00000 	.word	0x3ff00000
 8003f60:	40080000 	.word	0x40080000
 8003f64:	080044c8 	.word	0x080044c8
 8003f68:	080044d8 	.word	0x080044d8
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f72:	e5d7      	b.n	8003b24 <__ieee754_pow+0x354>
 8003f74:	f04f 0a01 	mov.w	sl, #1
 8003f78:	e65e      	b.n	8003c38 <__ieee754_pow+0x468>
 8003f7a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800424c <__ieee754_pow+0xa7c>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	4630      	mov	r0, r6
 8003f82:	4639      	mov	r1, r7
 8003f84:	f7fc f92a 	bl	80001dc <__adddf3>
 8003f88:	4642      	mov	r2, r8
 8003f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8003f8e:	464b      	mov	r3, r9
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc f920 	bl	80001d8 <__aeabi_dsub>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fa0:	f7fc fd62 	bl	8000a68 <__aeabi_dcmpgt>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f47f ae00 	bne.w	8003baa <__ieee754_pow+0x3da>
 8003faa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003fae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003fb2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8003fb6:	fa43 fa0a 	asr.w	sl, r3, sl
 8003fba:	44da      	add	sl, fp
 8003fbc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003fc0:	489d      	ldr	r0, [pc, #628]	@ (8004238 <__ieee754_pow+0xa68>)
 8003fc2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003fc6:	4108      	asrs	r0, r1
 8003fc8:	ea00 030a 	and.w	r3, r0, sl
 8003fcc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003fd0:	f1c1 0114 	rsb	r1, r1, #20
 8003fd4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8003fd8:	fa4a fa01 	asr.w	sl, sl, r1
 8003fdc:	f1bb 0f00 	cmp.w	fp, #0
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	bfb8      	it	lt
 8003fea:	f1ca 0a00 	rsblt	sl, sl, #0
 8003fee:	f7fc f8f3 	bl	80001d8 <__aeabi_dsub>
 8003ff2:	4680      	mov	r8, r0
 8003ff4:	4689      	mov	r9, r1
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	f7fc f8ed 	bl	80001dc <__adddf3>
 8004002:	2400      	movs	r4, #0
 8004004:	a37c      	add	r3, pc, #496	@ (adr r3, 80041f8 <__ieee754_pow+0xa28>)
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	4620      	mov	r0, r4
 800400c:	460d      	mov	r5, r1
 800400e:	f7fc fa9b 	bl	8000548 <__aeabi_dmul>
 8004012:	4642      	mov	r2, r8
 8004014:	e9cd 0100 	strd	r0, r1, [sp]
 8004018:	464b      	mov	r3, r9
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f7fc f8db 	bl	80001d8 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4630      	mov	r0, r6
 8004028:	4639      	mov	r1, r7
 800402a:	f7fc f8d5 	bl	80001d8 <__aeabi_dsub>
 800402e:	a374      	add	r3, pc, #464	@ (adr r3, 8004200 <__ieee754_pow+0xa30>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fa88 	bl	8000548 <__aeabi_dmul>
 8004038:	a373      	add	r3, pc, #460	@ (adr r3, 8004208 <__ieee754_pow+0xa38>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	4680      	mov	r8, r0
 8004040:	4689      	mov	r9, r1
 8004042:	4620      	mov	r0, r4
 8004044:	4629      	mov	r1, r5
 8004046:	f7fc fa7f 	bl	8000548 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f7fc f8c3 	bl	80001dc <__adddf3>
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004062:	f7fc f8bb 	bl	80001dc <__adddf3>
 8004066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800406a:	4680      	mov	r8, r0
 800406c:	4689      	mov	r9, r1
 800406e:	f7fc f8b3 	bl	80001d8 <__aeabi_dsub>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4620      	mov	r0, r4
 8004078:	4629      	mov	r1, r5
 800407a:	f7fc f8ad 	bl	80001d8 <__aeabi_dsub>
 800407e:	4642      	mov	r2, r8
 8004080:	4606      	mov	r6, r0
 8004082:	460f      	mov	r7, r1
 8004084:	464b      	mov	r3, r9
 8004086:	4640      	mov	r0, r8
 8004088:	4649      	mov	r1, r9
 800408a:	f7fc fa5d 	bl	8000548 <__aeabi_dmul>
 800408e:	a360      	add	r3, pc, #384	@ (adr r3, 8004210 <__ieee754_pow+0xa40>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	4604      	mov	r4, r0
 8004096:	460d      	mov	r5, r1
 8004098:	f7fc fa56 	bl	8000548 <__aeabi_dmul>
 800409c:	a35e      	add	r3, pc, #376	@ (adr r3, 8004218 <__ieee754_pow+0xa48>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc f899 	bl	80001d8 <__aeabi_dsub>
 80040a6:	4622      	mov	r2, r4
 80040a8:	462b      	mov	r3, r5
 80040aa:	f7fc fa4d 	bl	8000548 <__aeabi_dmul>
 80040ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8004220 <__ieee754_pow+0xa50>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc f892 	bl	80001dc <__adddf3>
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	f7fc fa44 	bl	8000548 <__aeabi_dmul>
 80040c0:	a359      	add	r3, pc, #356	@ (adr r3, 8004228 <__ieee754_pow+0xa58>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc f887 	bl	80001d8 <__aeabi_dsub>
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f7fc fa3b 	bl	8000548 <__aeabi_dmul>
 80040d2:	a357      	add	r3, pc, #348	@ (adr r3, 8004230 <__ieee754_pow+0xa60>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f880 	bl	80001dc <__adddf3>
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	f7fc fa32 	bl	8000548 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4640      	mov	r0, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	f7fc f874 	bl	80001d8 <__aeabi_dsub>
 80040f0:	4604      	mov	r4, r0
 80040f2:	460d      	mov	r5, r1
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	f7fc fa24 	bl	8000548 <__aeabi_dmul>
 8004100:	2200      	movs	r2, #0
 8004102:	e9cd 0100 	strd	r0, r1, [sp]
 8004106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800410a:	4620      	mov	r0, r4
 800410c:	4629      	mov	r1, r5
 800410e:	f7fc f863 	bl	80001d8 <__aeabi_dsub>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800411a:	f7fc fb3f 	bl	800079c <__aeabi_ddiv>
 800411e:	4632      	mov	r2, r6
 8004120:	4604      	mov	r4, r0
 8004122:	460d      	mov	r5, r1
 8004124:	463b      	mov	r3, r7
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	f7fc fa0d 	bl	8000548 <__aeabi_dmul>
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	f7fc f853 	bl	80001dc <__adddf3>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc f84b 	bl	80001d8 <__aeabi_dsub>
 8004142:	4642      	mov	r2, r8
 8004144:	464b      	mov	r3, r9
 8004146:	f7fc f847 	bl	80001d8 <__aeabi_dsub>
 800414a:	460b      	mov	r3, r1
 800414c:	4602      	mov	r2, r0
 800414e:	493b      	ldr	r1, [pc, #236]	@ (800423c <__ieee754_pow+0xa6c>)
 8004150:	2000      	movs	r0, #0
 8004152:	f7fc f841 	bl	80001d8 <__aeabi_dsub>
 8004156:	ec41 0b10 	vmov	d0, r0, r1
 800415a:	ee10 3a90 	vmov	r3, s1
 800415e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004166:	da30      	bge.n	80041ca <__ieee754_pow+0x9fa>
 8004168:	4650      	mov	r0, sl
 800416a:	f000 f87d 	bl	8004268 <scalbn>
 800416e:	ec51 0b10 	vmov	r0, r1, d0
 8004172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004176:	f7ff bbd2 	b.w	800391e <__ieee754_pow+0x14e>
 800417a:	4c31      	ldr	r4, [pc, #196]	@ (8004240 <__ieee754_pow+0xa70>)
 800417c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004180:	42a3      	cmp	r3, r4
 8004182:	d91a      	bls.n	80041ba <__ieee754_pow+0x9ea>
 8004184:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <__ieee754_pow+0xa74>)
 8004186:	440b      	add	r3, r1
 8004188:	4303      	orrs	r3, r0
 800418a:	d009      	beq.n	80041a0 <__ieee754_pow+0x9d0>
 800418c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004190:	2200      	movs	r2, #0
 8004192:	2300      	movs	r3, #0
 8004194:	f7fc fc4a 	bl	8000a2c <__aeabi_dcmplt>
 8004198:	3800      	subs	r0, #0
 800419a:	bf18      	it	ne
 800419c:	2001      	movne	r0, #1
 800419e:	e42b      	b.n	80039f8 <__ieee754_pow+0x228>
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	f7fc f818 	bl	80001d8 <__aeabi_dsub>
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	f7fc fc52 	bl	8000a54 <__aeabi_dcmpge>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1eb      	bne.n	800418c <__ieee754_pow+0x9bc>
 80041b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004254 <__ieee754_pow+0xa84>
 80041b8:	e6f7      	b.n	8003faa <__ieee754_pow+0x7da>
 80041ba:	469a      	mov	sl, r3
 80041bc:	4b22      	ldr	r3, [pc, #136]	@ (8004248 <__ieee754_pow+0xa78>)
 80041be:	459a      	cmp	sl, r3
 80041c0:	f63f aef3 	bhi.w	8003faa <__ieee754_pow+0x7da>
 80041c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80041c8:	e715      	b.n	8003ff6 <__ieee754_pow+0x826>
 80041ca:	ec51 0b10 	vmov	r0, r1, d0
 80041ce:	4619      	mov	r1, r3
 80041d0:	e7cf      	b.n	8004172 <__ieee754_pow+0x9a2>
 80041d2:	491a      	ldr	r1, [pc, #104]	@ (800423c <__ieee754_pow+0xa6c>)
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff bb18 	b.w	800380a <__ieee754_pow+0x3a>
 80041da:	2000      	movs	r0, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	f7ff bb14 	b.w	800380a <__ieee754_pow+0x3a>
 80041e2:	4630      	mov	r0, r6
 80041e4:	4639      	mov	r1, r7
 80041e6:	f7ff bb10 	b.w	800380a <__ieee754_pow+0x3a>
 80041ea:	460c      	mov	r4, r1
 80041ec:	f7ff bb5e 	b.w	80038ac <__ieee754_pow+0xdc>
 80041f0:	2400      	movs	r4, #0
 80041f2:	f7ff bb49 	b.w	8003888 <__ieee754_pow+0xb8>
 80041f6:	bf00      	nop
 80041f8:	00000000 	.word	0x00000000
 80041fc:	3fe62e43 	.word	0x3fe62e43
 8004200:	fefa39ef 	.word	0xfefa39ef
 8004204:	3fe62e42 	.word	0x3fe62e42
 8004208:	0ca86c39 	.word	0x0ca86c39
 800420c:	be205c61 	.word	0xbe205c61
 8004210:	72bea4d0 	.word	0x72bea4d0
 8004214:	3e663769 	.word	0x3e663769
 8004218:	c5d26bf1 	.word	0xc5d26bf1
 800421c:	3ebbbd41 	.word	0x3ebbbd41
 8004220:	af25de2c 	.word	0xaf25de2c
 8004224:	3f11566a 	.word	0x3f11566a
 8004228:	16bebd93 	.word	0x16bebd93
 800422c:	3f66c16c 	.word	0x3f66c16c
 8004230:	5555553e 	.word	0x5555553e
 8004234:	3fc55555 	.word	0x3fc55555
 8004238:	fff00000 	.word	0xfff00000
 800423c:	3ff00000 	.word	0x3ff00000
 8004240:	4090cbff 	.word	0x4090cbff
 8004244:	3f6f3400 	.word	0x3f6f3400
 8004248:	3fe00000 	.word	0x3fe00000
 800424c:	652b82fe 	.word	0x652b82fe
 8004250:	3c971547 	.word	0x3c971547
 8004254:	4090cc00 	.word	0x4090cc00

08004258 <fabs>:
 8004258:	ec51 0b10 	vmov	r0, r1, d0
 800425c:	4602      	mov	r2, r0
 800425e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004262:	ec43 2b10 	vmov	d0, r2, r3
 8004266:	4770      	bx	lr

08004268 <scalbn>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	ec55 4b10 	vmov	r4, r5, d0
 800426e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004272:	4606      	mov	r6, r0
 8004274:	462b      	mov	r3, r5
 8004276:	b991      	cbnz	r1, 800429e <scalbn+0x36>
 8004278:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800427c:	4323      	orrs	r3, r4
 800427e:	d03d      	beq.n	80042fc <scalbn+0x94>
 8004280:	4b35      	ldr	r3, [pc, #212]	@ (8004358 <scalbn+0xf0>)
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	2200      	movs	r2, #0
 8004288:	f7fc f95e 	bl	8000548 <__aeabi_dmul>
 800428c:	4b33      	ldr	r3, [pc, #204]	@ (800435c <scalbn+0xf4>)
 800428e:	429e      	cmp	r6, r3
 8004290:	4604      	mov	r4, r0
 8004292:	460d      	mov	r5, r1
 8004294:	da0f      	bge.n	80042b6 <scalbn+0x4e>
 8004296:	a328      	add	r3, pc, #160	@ (adr r3, 8004338 <scalbn+0xd0>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	e01e      	b.n	80042dc <scalbn+0x74>
 800429e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80042a2:	4291      	cmp	r1, r2
 80042a4:	d10b      	bne.n	80042be <scalbn+0x56>
 80042a6:	4622      	mov	r2, r4
 80042a8:	4620      	mov	r0, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7fb ff96 	bl	80001dc <__adddf3>
 80042b0:	4604      	mov	r4, r0
 80042b2:	460d      	mov	r5, r1
 80042b4:	e022      	b.n	80042fc <scalbn+0x94>
 80042b6:	460b      	mov	r3, r1
 80042b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80042bc:	3936      	subs	r1, #54	@ 0x36
 80042be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80042c2:	4296      	cmp	r6, r2
 80042c4:	dd0d      	ble.n	80042e2 <scalbn+0x7a>
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004340 <scalbn+0xd8>)
 80042ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ce:	da02      	bge.n	80042d6 <scalbn+0x6e>
 80042d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004348 <scalbn+0xe0>)
 80042d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8004340 <scalbn+0xd8>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fc f934 	bl	8000548 <__aeabi_dmul>
 80042e0:	e7e6      	b.n	80042b0 <scalbn+0x48>
 80042e2:	1872      	adds	r2, r6, r1
 80042e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80042e8:	428a      	cmp	r2, r1
 80042ea:	dcec      	bgt.n	80042c6 <scalbn+0x5e>
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	dd08      	ble.n	8004302 <scalbn+0x9a>
 80042f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80042f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042fc:	ec45 4b10 	vmov	d0, r4, r5
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004306:	da08      	bge.n	800431a <scalbn+0xb2>
 8004308:	2d00      	cmp	r5, #0
 800430a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004338 <scalbn+0xd0>)
 800430c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004310:	dac1      	bge.n	8004296 <scalbn+0x2e>
 8004312:	a10f      	add	r1, pc, #60	@ (adr r1, 8004350 <scalbn+0xe8>)
 8004314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004318:	e7bd      	b.n	8004296 <scalbn+0x2e>
 800431a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800431e:	3236      	adds	r2, #54	@ 0x36
 8004320:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004324:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004328:	4620      	mov	r0, r4
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <scalbn+0xf8>)
 800432c:	4629      	mov	r1, r5
 800432e:	2200      	movs	r2, #0
 8004330:	e7d4      	b.n	80042dc <scalbn+0x74>
 8004332:	bf00      	nop
 8004334:	f3af 8000 	nop.w
 8004338:	c2f8f359 	.word	0xc2f8f359
 800433c:	01a56e1f 	.word	0x01a56e1f
 8004340:	8800759c 	.word	0x8800759c
 8004344:	7e37e43c 	.word	0x7e37e43c
 8004348:	8800759c 	.word	0x8800759c
 800434c:	fe37e43c 	.word	0xfe37e43c
 8004350:	c2f8f359 	.word	0xc2f8f359
 8004354:	81a56e1f 	.word	0x81a56e1f
 8004358:	43500000 	.word	0x43500000
 800435c:	ffff3cb0 	.word	0xffff3cb0
 8004360:	3c900000 	.word	0x3c900000

08004364 <with_errno>:
 8004364:	b510      	push	{r4, lr}
 8004366:	ed2d 8b02 	vpush	{d8}
 800436a:	eeb0 8a40 	vmov.f32	s16, s0
 800436e:	eef0 8a60 	vmov.f32	s17, s1
 8004372:	4604      	mov	r4, r0
 8004374:	f000 f83c 	bl	80043f0 <__errno>
 8004378:	eeb0 0a48 	vmov.f32	s0, s16
 800437c:	eef0 0a68 	vmov.f32	s1, s17
 8004380:	ecbd 8b02 	vpop	{d8}
 8004384:	6004      	str	r4, [r0, #0]
 8004386:	bd10      	pop	{r4, pc}

08004388 <xflow>:
 8004388:	4603      	mov	r3, r0
 800438a:	b507      	push	{r0, r1, r2, lr}
 800438c:	ec51 0b10 	vmov	r0, r1, d0
 8004390:	b183      	cbz	r3, 80043b4 <xflow+0x2c>
 8004392:	4602      	mov	r2, r0
 8004394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004398:	e9cd 2300 	strd	r2, r3, [sp]
 800439c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043a0:	f7fc f8d2 	bl	8000548 <__aeabi_dmul>
 80043a4:	ec41 0b10 	vmov	d0, r0, r1
 80043a8:	2022      	movs	r0, #34	@ 0x22
 80043aa:	b003      	add	sp, #12
 80043ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b0:	f7ff bfd8 	b.w	8004364 <with_errno>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	e7ee      	b.n	8004398 <xflow+0x10>
 80043ba:	0000      	movs	r0, r0
 80043bc:	0000      	movs	r0, r0
	...

080043c0 <__math_uflow>:
 80043c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80043c8 <__math_uflow+0x8>
 80043c4:	f7ff bfe0 	b.w	8004388 <xflow>
 80043c8:	00000000 	.word	0x00000000
 80043cc:	10000000 	.word	0x10000000

080043d0 <__math_oflow>:
 80043d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80043d8 <__math_oflow+0x8>
 80043d4:	f7ff bfd8 	b.w	8004388 <xflow>
 80043d8:	00000000 	.word	0x00000000
 80043dc:	70000000 	.word	0x70000000

080043e0 <memset>:
 80043e0:	4402      	add	r2, r0
 80043e2:	4603      	mov	r3, r0
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d100      	bne.n	80043ea <memset+0xa>
 80043e8:	4770      	bx	lr
 80043ea:	f803 1b01 	strb.w	r1, [r3], #1
 80043ee:	e7f9      	b.n	80043e4 <memset+0x4>

080043f0 <__errno>:
 80043f0:	4b01      	ldr	r3, [pc, #4]	@ (80043f8 <__errno+0x8>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	200028c0 	.word	0x200028c0

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	@ (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	@ (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	@ (8004440 <__libc_init_array+0x44>)
 8004410:	f000 f818 	bl	8004444 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	080044f8 	.word	0x080044f8
 8004438:	080044f8 	.word	0x080044f8
 800443c:	080044f8 	.word	0x080044f8
 8004440:	080044fc 	.word	0x080044fc

08004444 <_init>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr

08004450 <_fini>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr
